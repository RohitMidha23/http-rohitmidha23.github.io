<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-05-02T09:32:43+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Rohit Midha</title><subtitle>A blog about a man who flips bits.</subtitle><entry><title type="html">Pytorch - Advanced Linear Regression</title><link href="http://localhost:4000/Pytorch-Linear-Regression-Advanced/" rel="alternate" type="text/html" title="Pytorch - Advanced Linear Regression" /><published>2020-04-27T12:20:00+01:00</published><updated>2020-04-27T12:20:00+01:00</updated><id>http://localhost:4000/Pytorch-Linear-Regression-Advanced</id><content type="html" xml:base="http://localhost:4000/Pytorch-Linear-Regression-Advanced/"><![CDATA[<p>This is the fifth tutorial of the Explained! series and the second of the Pytorch tutorials.</p>

<p>I will be cataloging all the work I do with regards to PyLibraries and will share it here or on <a href="http://bit.ly/RohitMidha23GitHub">my Github</a>.</p>

<p>That being said, Dive in!</p>

<h1 id="the-setup">The Setup</h1>

<p>In this tutorial we use a special package called hiddenlayer.</p>

<p>It’s very easy to install and serves as a way to visualize Pytorch graphs.</p>

<p>To install, use <code class="language-plaintext highlighter-rouge">pip install hiddenlayer</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Necessary imports
import torch
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import graphviz
import hiddenlayer as hl
import seaborn as sns
</code></pre></div></div>

<p>The dataset we use is the Bike Sharing Demand Dataset which you can get by registering <a href="https://www.kaggle.com/c/bike-sharing-demand/data">here</a>.</p>

<p>Now that we have the necessary things ready, let’s get into the thick of it.</p>

<h1 id="the-data">The Data</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data = pd.read_csv("train.csv", index_col = 0, nrows=1000)
</code></pre></div></div>

<p>For the sake of the tutorial we only use 1000 rows, but you can use the entire dataset!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>data.shape
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(1000, 11)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>plt.figure(figsize=(8,8))
sns.barplot('holiday', 'count', hue='season', data=data)
plt.title("Number of bikes rented!")
plt.legend(loc="upper right")
plt.show()
</code></pre></div></div>

<p><img src="/assets/images/PytorchLinearRegressionComplex/output_11_0.png" alt="png" /></p>

<p>I’m going to leave further exploration up to you, the reader.</p>

<p>If you have any doubts on how to use <code class="language-plaintext highlighter-rouge">matplotlib</code> you can refer to <a href="https://rohitmidha23.github.io/Matplotlib-Explained/">my  other tutorial on Matplotlib</a>.</p>

<h1 id="the-dataloader">The Dataloader</h1>

<p>We will use only a few columns for the final features.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>columns = ['season', 'holiday', 'workingday', 'weather', 'temp',
           'atemp', 'humidity', 'windspeed', 'casual', 'registered']

features = data[columns]
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>target = data["count"]
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Let's split the data into train and test data
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(features,
                                                    target,
                                                    test_size=0.2)
print(X_train.shape, y_train.shape)
print(X_test.shape, y_test.shape)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(800, 10) (800,)
(200, 10) (200,)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Convert the data to torch tensors
train_x = torch.tensor(X_train.values, dtype=torch.float)
test_x = torch.tensor(X_test.values, dtype=torch.float)

train_y = torch.tensor(y_train.values, dtype=torch.float)
test_y = torch.tensor(y_test.values, dtype=torch.float)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Load the data into pytorch required format
import torch.utils.data as data_utils
train_data = data_utils.TensorDataset(train_x, train_y)
train_loader = data_utils.DataLoader(train_data, batch_size=100, shuffle=True)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># To be able to use the data in batches, we use the `iter` function
features_batch, target_batch = iter(train_loader).next()
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(features_batch.shape)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>torch.Size([100, 10])
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>print(target_batch.shape)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>torch.Size([100])
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">features_batch</code> here represents one batch of the entire training data.</p>

<p>We had 1000 rows and we used <code class="language-plaintext highlighter-rouge">batch_size=100</code> hence <code class="language-plaintext highlighter-rouge">features_batch</code> has 100 rows as well.</p>

<h1 id="the-model">The Model</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Define some parameters
input_shape = train_x.shape[1]
output_shape = 1
hidden_layers = 10
loss_func = torch.nn.MSELoss()
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Define the model
model = torch.nn.Sequential(torch.nn.Linear(input_shape, hidden_layers),
                         torch.nn.Linear(hidden_layers, output_shape))
</code></pre></div></div>

<p>Notice how the output of first layer has the same shape as input to the second layer.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Visualize the model using `hiddenlayer` package
hl.build_graph(model, torch.zeros([10, input_shape]))
</code></pre></div></div>

<p><img src="/assets/images/PytorchLinearRegressionComplex/output_28_0.svg" alt="svg" /></p>

<p>It shows us that we have 2 Linear layers, just as we defined it!</p>

<p>We now need to define an optimizer.</p>

<p>An optimizer is an object that is able to update all the models paramters using in built torch functionality. This is much easier to use than to manually update the weights ourselves!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>optimizer = torch.optim.Adam(model.parameters(), lr=0.001)
</code></pre></div></div>

<h1 id="the-training">The Training!</h1>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>total_steps = len(train_loader)
num_epochs = 10000
for epoch in range(num_epochs + 1):
  for i, (inputs, target) in enumerate(train_loader):
    # here features and target are one batch of the training data like explained above

    # perform a forward pass
    output = model(inputs)
    # calculate the loss
    loss = loss_func(output, target)

    # make the gradients zero
    optimizer.zero_grad()

    # backpropogate
    loss.backward()

    # update the parameters. Notice how simple it is here
    optimizer.step()

    if epoch % 2000 == 0:
      print("Epoch [{}/{}]: Step[{}/{}], Loss:{:.4f}"
              .format(epoch+1, num_epochs, i+1, total_steps, loss.item()))
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Epoch [1/10000]: Step[1/8], Loss:3282.0115
Epoch [1/10000]: Step[2/8], Loss:3065.8315
Epoch [1/10000]: Step[3/8], Loss:3550.5315
Epoch [1/10000]: Step[4/8], Loss:3244.2869
Epoch [1/10000]: Step[5/8], Loss:3749.1912
Epoch [1/10000]: Step[6/8], Loss:3523.2688
Epoch [1/10000]: Step[7/8], Loss:3556.7913
Epoch [1/10000]: Step[8/8], Loss:3748.4592
Epoch [2001/10000]: Step[1/8], Loss:3296.5720
Epoch [2001/10000]: Step[2/8], Loss:3847.5923
Epoch [2001/10000]: Step[3/8], Loss:2398.2815
Epoch [2001/10000]: Step[4/8], Loss:3496.5776
Epoch [2001/10000]: Step[5/8], Loss:4121.9551
Epoch [2001/10000]: Step[6/8], Loss:2642.0327
Epoch [2001/10000]: Step[7/8], Loss:3260.0356
Epoch [2001/10000]: Step[8/8], Loss:3707.0972
Epoch [4001/10000]: Step[1/8], Loss:3247.1775
Epoch [4001/10000]: Step[2/8], Loss:3465.2959
Epoch [4001/10000]: Step[3/8], Loss:2906.5935
Epoch [4001/10000]: Step[4/8], Loss:3023.2544
Epoch [4001/10000]: Step[5/8], Loss:2567.9910
Epoch [4001/10000]: Step[6/8], Loss:3718.7825
Epoch [4001/10000]: Step[7/8], Loss:3736.2141
Epoch [4001/10000]: Step[8/8], Loss:4090.5081
Epoch [6001/10000]: Step[1/8], Loss:3859.3101
Epoch [6001/10000]: Step[2/8], Loss:3873.6516
Epoch [6001/10000]: Step[3/8], Loss:3024.7444
Epoch [6001/10000]: Step[4/8], Loss:2891.5762
Epoch [6001/10000]: Step[5/8], Loss:2543.3599
Epoch [6001/10000]: Step[6/8], Loss:3624.6553
Epoch [6001/10000]: Step[7/8], Loss:4131.1685
Epoch [6001/10000]: Step[8/8], Loss:2799.2190
Epoch [8001/10000]: Step[1/8], Loss:3553.4956
Epoch [8001/10000]: Step[2/8], Loss:3211.1287
Epoch [8001/10000]: Step[3/8], Loss:2801.9431
Epoch [8001/10000]: Step[4/8], Loss:4875.0898
Epoch [8001/10000]: Step[5/8], Loss:2408.1021
Epoch [8001/10000]: Step[6/8], Loss:2821.6018
Epoch [8001/10000]: Step[7/8], Loss:3497.8740
Epoch [8001/10000]: Step[8/8], Loss:3590.0503
Epoch [10001/10000]: Step[1/8], Loss:2453.6292
Epoch [10001/10000]: Step[2/8], Loss:4270.7446
Epoch [10001/10000]: Step[3/8], Loss:2779.2837
Epoch [10001/10000]: Step[4/8], Loss:3068.2778
Epoch [10001/10000]: Step[5/8], Loss:3535.3823
Epoch [10001/10000]: Step[6/8], Loss:3683.9949
Epoch [10001/10000]: Step[7/8], Loss:4048.2344
Epoch [10001/10000]: Step[8/8], Loss:2899.5249
</code></pre></div></div>

<h1 id="the-evaluation">The Evaluation</h1>

<p>To evaluate the model we switch to evaluation mode.</p>

<p>This is because the <code class="language-plaintext highlighter-rouge">Dropout</code> and <code class="language-plaintext highlighter-rouge">BatchNormalization</code> layers have different models for evaluation and training.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>model.eval()

# Predict on the test set
with torch.no_grad():
  # Anything inside `torch.no_grad()`
  # puts the `requires_grad` property to False.
  y_pred = model(test_x)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># convert the tensor to a numpy array
y_pred = y_pred.detach().numpy()
print(y_pred.shape)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(200, 1)
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>y_test.shape
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(200,)
</code></pre></div></div>

<p>Both are the same shape so we can continue to evaluate the model.</p>

<p>To evaluate the model we use the r2 (r-square) score.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from sklearn.metrics import r2_score

print("R2 score: ", r2_score(y_test, y_pred))
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>R2 score:  0.028551743423591014
</code></pre></div></div>

<p>As you can see the R2 score is pretty bad (higher the better).</p>

<p>Clearly we need to train our model for more number of epochs and also on the entire dataset.</p>

<p>I leave that up to you to do.</p>

<hr />

<!-- Place this tag where you want the button to render. -->
<p><a class="github-button" href="https://github.com/RohitMidha23" data-size="large" data-show-count="true" aria-label="Follow @RohitMidha23 on GitHub">Follow @RohitMidha23</a>
<!-- Place this tag in your head or just before your close body tag. -->
<script async="" defer="" src="https://buttons.github.io/buttons.js"></script></p>

<p>Find more at my Github repository <a href="http://bit.ly/ExplainedRepo">Explained</a>.</p>

<p>Show some :heart: by :star:ing it.</p>

<!-- Place this tag where you want the button to render. -->
<p><a class="github-button" href="https://github.com/RohitMidha23/Explained" data-size="large" data-show-count="true" aria-label="Star RohitMidha23/Explained on GitHub">Star</a>
<a href="http://bit.ly/2TGi2aE" class="github-corner" aria-label="View source on GitHub"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#fff; color:#151513; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style></p>]]></content><author><name>Rohit Midha</name></author><category term="blog" /><category term="machine learning" /><category term="pytorch" /><category term="tutorial" /><summary type="html"><![CDATA[This is the fifth tutorial of the Explained! series and the second of the Pytorch tutorials.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/PytorchLinearRegression/logo.png" /><media:content medium="image" url="http://localhost:4000/assets/images/PytorchLinearRegression/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Pytorch - Simple Linear Regression</title><link href="http://localhost:4000/Pytorch-Linear-Regression/" rel="alternate" type="text/html" title="Pytorch - Simple Linear Regression" /><published>2020-04-26T12:20:00+01:00</published><updated>2020-04-26T12:20:00+01:00</updated><id>http://localhost:4000/Pytorch-Linear-Regression</id><content type="html" xml:base="http://localhost:4000/Pytorch-Linear-Regression/"><![CDATA[<p>This is the fourth tutorial of the Explained! series and the start of the Pytorch tutorials.</p>

<p>I will be cataloging all the work I do with regards to PyLibraries and will share it here or on <a href="http://bit.ly/RohitMidha23GitHub">my Github</a>.</p>

<p>That being said, Dive in!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Necessary imports
</span><span class="kn">import</span> <span class="nn">torch</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create the sample dataset
</span><span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">20.4</span><span class="p">,</span> <span class="mf">30.5</span><span class="p">,</span> <span class="mf">7.5</span><span class="p">,</span> <span class="mf">9.9</span><span class="p">,</span>
              <span class="mf">100.9</span><span class="p">,</span> <span class="mf">200.1</span><span class="p">,</span> <span class="mf">45.1</span><span class="p">,</span> <span class="mf">150.1</span><span class="p">,</span> <span class="mf">7.0</span><span class="p">,</span>
              <span class="mf">29.4</span><span class="p">,</span> <span class="mf">31.5</span><span class="p">,</span> <span class="mf">157.3</span><span class="p">,</span> <span class="mf">10.9</span><span class="p">,</span> <span class="mf">120.6</span><span class="p">,</span>
              <span class="mf">16.9</span><span class="p">,</span> <span class="mf">201.1</span><span class="p">,</span> <span class="mf">21.1</span><span class="p">,</span> <span class="mf">300.1</span><span class="p">,</span> <span class="mf">21.0</span><span class="p">,</span>
              <span class="mf">120.4</span><span class="p">,</span> <span class="mf">230.5</span><span class="p">,</span> <span class="mf">37.5</span><span class="p">,</span> <span class="mf">49.9</span><span class="p">,</span> <span class="mf">230.0</span><span class="p">,</span>
              <span class="mf">109.9</span><span class="p">,</span> <span class="mf">121.1</span><span class="p">,</span> <span class="mf">145.1</span><span class="p">,</span> <span class="mf">157.1</span><span class="p">,</span> <span class="mf">17.0</span><span class="p">,</span>
              <span class="mf">219.4</span><span class="p">,</span> <span class="mf">131.5</span><span class="p">,</span> <span class="mf">187.3</span><span class="p">,</span> <span class="mf">210.9</span><span class="p">,</span> <span class="mf">290.6</span><span class="p">,</span>
              <span class="mf">126.9</span><span class="p">,</span> <span class="mf">71.1</span><span class="p">,</span> <span class="mf">91.1</span><span class="p">,</span> <span class="mf">19.1</span><span class="p">,</span> <span class="mf">100.0</span><span class="p">])</span>
<span class="n">X_train</span> <span class="o">=</span> <span class="p">[]</span>
<span class="c1"># normalize each value
</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">X</span><span class="p">:</span>
  <span class="n">X_train</span><span class="p">.</span><span class="n">append</span><span class="p">([</span><span class="n">i</span><span class="o">/</span><span class="mi">100</span><span class="p">])</span>

<span class="n">X_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>

<span class="n">y_train</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="n">i</span><span class="o">*</span><span class="mf">0.175</span> <span class="o">+</span> <span class="mf">0.4</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">X_train</span><span class="p">])</span> <span class="c1"># bias should be 0.4 and w=0.175
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Check the shape of the data to be sure
</span><span class="k">print</span><span class="p">(</span><span class="n">X_train</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">y_train</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(40, 1)
(40, 1)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Visualize the data
</span><span class="n">plt</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s">"green"</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">"Original Data"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/PytorchLinearRegression/output_3_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create the torch tensors
</span><span class="n">X</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">from_numpy</span><span class="p">(</span><span class="n">X_train</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">from_numpy</span><span class="p">(</span><span class="n">y_train</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">X</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">y</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>torch.Size([40, 1])
torch.Size([40, 1])
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Define the parameters needed
</span><span class="n">input_size</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">hidden_layers</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">outputs</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">learning_rate</span> <span class="o">=</span> <span class="mf">0.001</span>
<span class="n">num_epochs</span> <span class="o">=</span> <span class="mi">150</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create the first weight tensor
</span><span class="n">w1</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="n">input_size</span><span class="p">,</span> <span class="n">hidden_layers</span><span class="p">,</span> <span class="n">requires_grad</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">w1</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>torch.Size([1, 1])
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">b1</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="n">rand</span><span class="p">(</span><span class="n">hidden_layers</span><span class="p">,</span> <span class="n">outputs</span><span class="p">,</span> <span class="n">requires_grad</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">b1</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>torch.Size([1, 1])
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">num_epochs</span><span class="p">):</span>
  <span class="c1"># y = wx + b - one forward pass
</span>  <span class="n">y_pred</span> <span class="o">=</span> <span class="n">X</span><span class="p">.</span><span class="n">mm</span><span class="p">(</span><span class="n">w1</span><span class="p">.</span><span class="n">double</span><span class="p">()).</span><span class="n">clamp</span><span class="p">(</span><span class="nb">min</span><span class="o">=</span><span class="mi">0</span><span class="p">).</span><span class="n">add</span><span class="p">(</span><span class="n">b1</span><span class="p">.</span><span class="n">double</span><span class="p">())</span>
  <span class="c1"># Here the `.clamp(min=0)` works as the ReLu actiation function
</span>
  <span class="c1"># calculate the loss
</span>  <span class="n">loss</span> <span class="o">=</span> <span class="p">(</span><span class="n">y</span><span class="o">-</span><span class="n">y_pred</span><span class="p">).</span><span class="nb">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">).</span><span class="nb">sum</span><span class="p">()</span>

  <span class="k">if</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">25</span><span class="o">==</span><span class="mi">0</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Epoch : "</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="s">"</span><span class="se">\t</span><span class="s"> Loss :"</span><span class="p">,</span> <span class="n">loss</span><span class="p">)</span>

  <span class="c1"># backpropogation
</span>  <span class="n">loss</span><span class="p">.</span><span class="n">backward</span><span class="p">()</span>

  <span class="k">with</span> <span class="n">torch</span><span class="p">.</span><span class="n">no_grad</span><span class="p">():</span>
    <span class="c1"># update the weights and biases
</span>    <span class="n">w1</span> <span class="o">-=</span> <span class="p">(</span><span class="n">learning_rate</span> <span class="o">*</span> <span class="n">w1</span><span class="p">.</span><span class="n">grad</span><span class="p">)</span>
    <span class="n">b1</span> <span class="o">-=</span> <span class="p">(</span><span class="n">learning_rate</span> <span class="o">*</span> <span class="n">b1</span><span class="p">.</span><span class="n">grad</span><span class="p">)</span>
    <span class="c1"># set the gradients to 0
</span>    <span class="n">w1</span><span class="p">.</span><span class="n">grad</span><span class="p">.</span><span class="n">zero_</span><span class="p">()</span>
    <span class="n">b1</span><span class="p">.</span><span class="n">grad</span><span class="p">.</span><span class="n">zero_</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Epoch :  25 	 Loss : tensor(0.0021, dtype=torch.float64, grad_fn=&lt;SumBackward0&gt;)
Epoch :  50 	 Loss : tensor(0.0004, dtype=torch.float64, grad_fn=&lt;SumBackward0&gt;)
Epoch :  75 	 Loss : tensor(0.0001, dtype=torch.float64, grad_fn=&lt;SumBackward0&gt;)
Epoch :  100 	 Loss : tensor(4.1570e-05, dtype=torch.float64, grad_fn=&lt;SumBackward0&gt;)
Epoch :  125 	 Loss : tensor(1.3125e-05, dtype=torch.float64, grad_fn=&lt;SumBackward0&gt;)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">w1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">b1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>tensor([[0.1753]], requires_grad=True)
tensor([[0.3995]], requires_grad=True)
</code></pre></div></div>

<p>That’s pretty close to the actual values we used.</p>

<p>You can try running with more iterations if you want to see if you ever get the actual values!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Let's visualize the output
</span><span class="n">plt</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">c</span><span class="o">=</span><span class="s">"green"</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">150</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">"Original Data"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y_pred</span><span class="p">.</span><span class="n">detach</span><span class="p">().</span><span class="n">numpy</span><span class="p">(),</span> <span class="n">label</span><span class="o">=</span><span class="s">"Fitted Line"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/PytorchLinearRegression/output_12_0.png" alt="png" /></p>

<p>As you can clearly see the line fits very well with the data.</p>

<p>This is a simple one neuron network that simply performs linear regression.</p>

<p>You might never use this in practice but the idea is to understand the concept!</p>

<hr />

<!-- Place this tag where you want the button to render. -->
<p><a class="github-button" href="https://github.com/RohitMidha23" data-size="large" data-show-count="true" aria-label="Follow @RohitMidha23 on GitHub">Follow @RohitMidha23</a>
<!-- Place this tag in your head or just before your close body tag. -->
<script async="" defer="" src="https://buttons.github.io/buttons.js"></script></p>

<p>Find more at my Github repository <a href="http://bit.ly/ExplainedRepo">Explained</a>.</p>

<p>Show some :heart: by :star:ing it.</p>

<!-- Place this tag where you want the button to render. -->
<p><a class="github-button" href="https://github.com/RohitMidha23/Explained" data-size="large" data-show-count="true" aria-label="Star RohitMidha23/Explained on GitHub">Star</a>
<a href="http://bit.ly/2TGi2aE" class="github-corner" aria-label="View source on GitHub"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#fff; color:#151513; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style></p>]]></content><author><name>Rohit Midha</name></author><category term="blog" /><category term="machine learning" /><category term="pytorch" /><category term="tutorial" /><summary type="html"><![CDATA[This is the fourth tutorial of the Explained! series and the start of the Pytorch tutorials.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/PytorchLinearRegression/logo.png" /><media:content medium="image" url="http://localhost:4000/assets/images/PytorchLinearRegression/logo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">A Data Science Perspective to playing FIFA 19 :soccer:</title><link href="http://localhost:4000/FIFA-19/" rel="alternate" type="text/html" title="A Data Science Perspective to playing FIFA 19 :soccer:" /><published>2019-04-01T10:00:00+01:00</published><updated>2019-04-01T10:00:00+01:00</updated><id>http://localhost:4000/FIFA-19</id><content type="html" xml:base="http://localhost:4000/FIFA-19/"><![CDATA[<p>I’ve always loved football.</p>

<p>And FIFA was what got me into football, as a child.</p>

<p>I loved FIFA.</p>

<p>Still do, for that matter. The difference now though, is that I can harness the power of data visualization!</p>

<p>And that’s what this blog post is about.</p>

<p>A huge shout-out to the guys who posted this amazing dataset!</p>

<p>Find it <a href="https://www.kaggle.com/karangadiya/fifa19">here</a>.</p>

<p>Without further ado, let’s dive in (Not the Ramos way though)</p>

<hr />
<p>Let’s start with the pesky imports and get them out of the way.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="n">sns</span><span class="p">.</span><span class="nb">set</span><span class="p">(</span><span class="n">style</span> <span class="o">=</span> <span class="s">'dark'</span><span class="p">)</span>

</code></pre></div></div>

<hr />

<p>And of course, the data itself.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fifa</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'data.csv'</span><span class="p">,</span><span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h1 id="the-real-best-player">THE (Real) BEST Player</h1>

<p>We all can agree that The Best Player awards were… <em>vague</em>. <strong><em>Let’s rectify that.</em></strong></p>

<p>The simple objective is to find the best player based on various attributes!</p>

<h3 id="the-overall-rating">The Overall Rating</h3>

<p>So, what’s the average distribution of overall rating?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">18</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="n">countplot</span><span class="p">(</span><span class="n">fifa</span><span class="p">[</span><span class="s">'Overall'</span><span class="p">],</span> <span class="n">palette</span><span class="o">=</span><span class="s">'rocket'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/FIFA19/output_7_0.png" alt="png" /></p>

<p>Looks like we have quite a normal distribution here. Kudos to the FIFA team on that.</p>

<p>Not surprised though, I expected something similar. Most players are average, some are just disappointingly wasted, and some extend all the way to extreme levels of awesomeness.</p>

<p>Moving on…</p>

<h3 id="the-eldest-players">The Eldest Players</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fifa</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">'Age'</span> <span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)[[</span><span class="s">'Name'</span><span class="p">,</span><span class="s">'Club'</span><span class="p">,</span><span class="s">'Nationality'</span><span class="p">,</span><span class="s">'Overall'</span><span class="p">,</span> <span class="s">'Age'</span> <span class="p">]].</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Name</th>
      <th>Club</th>
      <th>Nationality</th>
      <th>Overall</th>
      <th>Age</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>4741</th>
      <td>O. Pérez</td>
      <td>Pachuca</td>
      <td>Mexico</td>
      <td>71</td>
      <td>45</td>
    </tr>
    <tr>
      <th>18183</th>
      <td>K. Pilkington</td>
      <td>Cambridge United</td>
      <td>England</td>
      <td>48</td>
      <td>44</td>
    </tr>
    <tr>
      <th>17726</th>
      <td>T. Warner</td>
      <td>Accrington Stanley</td>
      <td>Trinidad &amp; Tobago</td>
      <td>53</td>
      <td>44</td>
    </tr>
    <tr>
      <th>10545</th>
      <td>S. Narazaki</td>
      <td>Nagoya Grampus</td>
      <td>Japan</td>
      <td>65</td>
      <td>42</td>
    </tr>
    <tr>
      <th>7225</th>
      <td>C. Muñoz</td>
      <td>CD Universidad de Concepción</td>
      <td>Argentina</td>
      <td>68</td>
      <td>41</td>
    </tr>
  </tbody>
</table>
</div>

<p>Not going to lie, I’ve <strong>never</strong> heard of these players. But a look at their overall might explain it!</p>

<h3 id="the-youngest-players">The Youngest Players</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fifa</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">'Age'</span> <span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">True</span><span class="p">)[[</span><span class="s">'Name'</span><span class="p">,</span><span class="s">'Club'</span><span class="p">,</span><span class="s">'Nationality'</span><span class="p">,</span><span class="s">'Overall'</span><span class="p">,</span> <span class="s">'Age'</span><span class="p">,</span><span class="s">'Potential'</span> <span class="p">]].</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Name</th>
      <th>Club</th>
      <th>Nationality</th>
      <th>Overall</th>
      <th>Age</th>
      <th>Potential</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>18206</th>
      <td>G. Nugent</td>
      <td>Tranmere Rovers</td>
      <td>England</td>
      <td>46</td>
      <td>16</td>
      <td>66</td>
    </tr>
    <tr>
      <th>17743</th>
      <td>J. Olstad</td>
      <td>Sarpsborg 08 FF</td>
      <td>Norway</td>
      <td>52</td>
      <td>16</td>
      <td>69</td>
    </tr>
    <tr>
      <th>13293</th>
      <td>H. Massengo</td>
      <td>AS Monaco</td>
      <td>France</td>
      <td>62</td>
      <td>16</td>
      <td>75</td>
    </tr>
    <tr>
      <th>16081</th>
      <td>J. Italiano</td>
      <td>Perth Glory</td>
      <td>Australia</td>
      <td>58</td>
      <td>16</td>
      <td>79</td>
    </tr>
    <tr>
      <th>18166</th>
      <td>N. Ayéva</td>
      <td>Örebro SK</td>
      <td>Sweden</td>
      <td>48</td>
      <td>16</td>
      <td>72</td>
    </tr>
  </tbody>
</table>
</div>

<p>Again, who are they even?</p>

<p>Sure does look like my boy, Massengo has a bright future.</p>

<hr />

<h3 id="the-best-freekick-takers">The Best Freekick Takers</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fifa</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">'FKAccuracy'</span> <span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)[[</span><span class="s">'Name'</span><span class="p">,</span><span class="s">'Club'</span><span class="p">,</span><span class="s">'Nationality'</span><span class="p">,</span><span class="s">'Overall'</span><span class="p">,</span> <span class="s">'Age'</span><span class="p">,</span><span class="s">'FKAccuracy'</span><span class="p">]].</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Name</th>
      <th>Club</th>
      <th>Nationality</th>
      <th>Overall</th>
      <th>Age</th>
      <th>FKAccuracy</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>L. Messi</td>
      <td>FC Barcelona</td>
      <td>Argentina</td>
      <td>94</td>
      <td>31</td>
      <td>94.0</td>
    </tr>
    <tr>
      <th>293</th>
      <td>S. Giovinco</td>
      <td>Toronto FC</td>
      <td>Italy</td>
      <td>82</td>
      <td>31</td>
      <td>93.0</td>
    </tr>
    <tr>
      <th>72</th>
      <td>M. Pjanić</td>
      <td>Juventus</td>
      <td>Bosnia Herzegovina</td>
      <td>86</td>
      <td>28</td>
      <td>92.0</td>
    </tr>
    <tr>
      <th>1113</th>
      <td>E. Bardhi</td>
      <td>Levante UD</td>
      <td>FYR Macedonia</td>
      <td>77</td>
      <td>22</td>
      <td>91.0</td>
    </tr>
    <tr>
      <th>449</th>
      <td>H. Çalhanoğlu</td>
      <td>Milan</td>
      <td>Turkey</td>
      <td>80</td>
      <td>24</td>
      <td>90.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>Okay, this is clearly no surprise. Messi at the top makes sense.</p>

<p>But Ronaldo not in the top 5? What’s up EA?</p>

<hr />

<h3 id="the-best-penalty-kick-taker">The Best Penalty Kick Taker</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fifa</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">'Penalties'</span> <span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)[[</span><span class="s">'Name'</span><span class="p">,</span><span class="s">'Club'</span><span class="p">,</span><span class="s">'Nationality'</span><span class="p">,</span><span class="s">'Overall'</span><span class="p">,</span> <span class="s">'Age'</span><span class="p">,</span><span class="s">'Penalties'</span><span class="p">]].</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Name</th>
      <th>Club</th>
      <th>Nationality</th>
      <th>Overall</th>
      <th>Age</th>
      <th>Penalties</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>206</th>
      <td>M. Balotelli</td>
      <td>OGC Nice</td>
      <td>Italy</td>
      <td>83</td>
      <td>27</td>
      <td>92.0</td>
    </tr>
    <tr>
      <th>118</th>
      <td>Fabinho</td>
      <td>Liverpool</td>
      <td>Brazil</td>
      <td>84</td>
      <td>24</td>
      <td>91.0</td>
    </tr>
    <tr>
      <th>16</th>
      <td>H. Kane</td>
      <td>Tottenham Hotspur</td>
      <td>England</td>
      <td>89</td>
      <td>24</td>
      <td>90.0</td>
    </tr>
    <tr>
      <th>297</th>
      <td>M. Kruse</td>
      <td>SV Werder Bremen</td>
      <td>Germany</td>
      <td>82</td>
      <td>30</td>
      <td>90.0</td>
    </tr>
    <tr>
      <th>945</th>
      <td>L. Baines</td>
      <td>Everton</td>
      <td>England</td>
      <td>77</td>
      <td>33</td>
      <td>90.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>Wow, I thought Ronaldo would definitely make at least this list.
So much for calling him penaldo huh?</p>

<hr />
<h3 id="the-one-with-the-ball-control">The One with the Ball Control</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fifa</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">'BallControl'</span> <span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)[[</span><span class="s">'Name'</span><span class="p">,</span><span class="s">'Club'</span><span class="p">,</span><span class="s">'Nationality'</span><span class="p">,</span><span class="s">'Overall'</span><span class="p">,</span> <span class="s">'Age'</span><span class="p">,</span><span class="s">'BallControl'</span><span class="p">]].</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Name</th>
      <th>Club</th>
      <th>Nationality</th>
      <th>Overall</th>
      <th>Age</th>
      <th>BallControl</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>L. Messi</td>
      <td>FC Barcelona</td>
      <td>Argentina</td>
      <td>94</td>
      <td>31</td>
      <td>96.0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Neymar Jr</td>
      <td>Paris Saint-Germain</td>
      <td>Brazil</td>
      <td>92</td>
      <td>26</td>
      <td>95.0</td>
    </tr>
    <tr>
      <th>30</th>
      <td>Isco</td>
      <td>Real Madrid</td>
      <td>Spain</td>
      <td>88</td>
      <td>26</td>
      <td>95.0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>E. Hazard</td>
      <td>Chelsea</td>
      <td>Belgium</td>
      <td>91</td>
      <td>27</td>
      <td>94.0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Cristiano Ronaldo</td>
      <td>Juventus</td>
      <td>Portugal</td>
      <td>94</td>
      <td>33</td>
      <td>94.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>Ah, this gave us pretty standard values.</p>

<hr />

<h3 id="the-fastest">The Fastest</h3>

<p>Okay. pretty sure Mbappe and Sane should be near the top, but let’s see where FIFA ranks them.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fifa</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">'SprintSpeed'</span> <span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)[[</span><span class="s">'Name'</span><span class="p">,</span><span class="s">'Club'</span><span class="p">,</span><span class="s">'Nationality'</span><span class="p">,</span><span class="s">'Overall'</span><span class="p">,</span> <span class="s">'Age'</span><span class="p">,</span><span class="s">'SprintSpeed'</span><span class="p">]].</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Name</th>
      <th>Club</th>
      <th>Nationality</th>
      <th>Overall</th>
      <th>Age</th>
      <th>SprintSpeed</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1968</th>
      <td>Adama</td>
      <td>Wolverhampton Wanderers</td>
      <td>Spain</td>
      <td>75</td>
      <td>22</td>
      <td>96.0</td>
    </tr>
    <tr>
      <th>55</th>
      <td>L. Sané</td>
      <td>Manchester City</td>
      <td>Germany</td>
      <td>86</td>
      <td>22</td>
      <td>96.0</td>
    </tr>
    <tr>
      <th>25</th>
      <td>K. Mbappé</td>
      <td>Paris Saint-Germain</td>
      <td>France</td>
      <td>88</td>
      <td>19</td>
      <td>96.0</td>
    </tr>
    <tr>
      <th>1489</th>
      <td>I. Bebou</td>
      <td>Hannover 96</td>
      <td>Togo</td>
      <td>76</td>
      <td>24</td>
      <td>95.0</td>
    </tr>
    <tr>
      <th>36</th>
      <td>G. Bale</td>
      <td>Real Madrid</td>
      <td>Wales</td>
      <td>88</td>
      <td>28</td>
      <td>95.0</td>
    </tr>
  </tbody>
</table>
</div>

<p>Finally getting a few predictions right, huh?</p>

<hr />

<h3 id="famous-clubs">Famous Clubs</h3>

<p>Okay let’s start going through the data club wise</p>

<h2 id="age-distribution">Age Distribution</h2>

<p>Let’s start with the age distribution in these clubs. My bet : Barcelona will top this list given the number of old players they have.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">clubs</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Chelsea'</span> <span class="p">,</span> <span class="s">'Arsenal'</span><span class="p">,</span> <span class="s">'Juventus'</span><span class="p">,</span> <span class="s">'Paris Sain-Germain'</span> <span class="p">,</span><span class="s">'FC Bayern München'</span><span class="p">,</span>
       <span class="s">'Real Madrid'</span> <span class="p">,</span> <span class="s">'FC Barcelona'</span> <span class="p">,</span> <span class="s">'Borussia Dortmund'</span> <span class="p">,</span> <span class="s">'Manchester United'</span> <span class="p">,</span>
       <span class="s">'FC Porto'</span><span class="p">,</span> <span class="s">'Liverpool'</span><span class="p">,</span> <span class="s">'Manchester City'</span><span class="p">]</span>
</code></pre></div></div>

<p>Questionable decision adding Liverpool, I know.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fifa_club_age</span> <span class="o">=</span> <span class="n">fifa</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">fifa</span><span class="p">[</span><span class="s">'Club'</span><span class="p">].</span><span class="n">isin</span><span class="p">(</span><span class="n">clubs</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">fifa</span><span class="p">[</span><span class="s">'Age'</span><span class="p">]]</span>
<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span> <span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span> <span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="n">violinplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">'Club'</span> <span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="s">'Age'</span> <span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">fifa_club_age</span><span class="p">,</span><span class="n">palette</span><span class="o">=</span><span class="s">'rocket'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Age Distribution in famous clubs'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">rotation</span> <span class="o">=</span> <span class="mi">50</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/FIFA19/output_33_0.png" alt="png" /></p>

<p>Well, that’s something.</p>

<p>Looks like Real Madrid, Liverrpool and Porto have the most young talent. Good to know!</p>

<h2 id="overall-rating">Overall Rating</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fifa_club_rating</span> <span class="o">=</span> <span class="n">fifa</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">fifa</span><span class="p">[</span><span class="s">'Club'</span><span class="p">].</span><span class="n">isin</span><span class="p">(</span><span class="n">clubs</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">fifa</span><span class="p">[</span><span class="s">'Overall'</span><span class="p">]]</span>
<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span> <span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span> <span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="n">violinplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">'Club'</span> <span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="s">'Overall'</span> <span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">fifa_club_rating</span><span class="p">,</span> <span class="n">palette</span><span class="o">=</span><span class="s">'rocket'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Overall Rating Distribution in famous clubs'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">rotation</span> <span class="o">=</span> <span class="mi">50</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/FIFA19/output_36_0.png" alt="png" /></p>

<p>Woah, look at Juventus go. Pretty sure they’ll lead in Freekick Accuracy as well.</p>

<p>Really surprised by Barcelona and Real Madrid though. Ah, the things data can tell you :smiley:</p>

<h2 id="the-best-club">The Best Club?</h2>

<p>Real Madrid supporter here, so you know what I would want.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">best_dict</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">club</span> <span class="ow">in</span> <span class="n">fifa</span><span class="p">[</span><span class="s">'Club'</span><span class="p">].</span><span class="n">unique</span><span class="p">():</span>
    <span class="n">overall_rating</span> <span class="o">=</span> <span class="n">fifa</span><span class="p">[</span><span class="s">'Overall'</span><span class="p">][</span><span class="n">fifa</span><span class="p">[</span><span class="s">'Club'</span><span class="p">]</span> <span class="o">==</span> <span class="n">club</span><span class="p">].</span><span class="nb">sum</span><span class="p">()</span>
    <span class="n">best_dict</span><span class="p">[</span><span class="n">club</span><span class="p">]</span> <span class="o">=</span> <span class="n">overall_rating</span>
<span class="n">best_club</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">.</span><span class="n">from_dict</span><span class="p">(</span><span class="n">best_dict</span><span class="p">,</span><span class="n">orient</span><span class="o">=</span><span class="s">'index'</span><span class="p">,</span> <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'overall'</span><span class="p">])</span>
<span class="n">best_club</span><span class="p">[</span><span class="s">'club'</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_club</span><span class="p">.</span><span class="n">index</span>
<span class="n">best_club</span> <span class="o">=</span> <span class="n">best_club</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">'overall'</span> <span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span>  <span class="bp">False</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span> <span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span> <span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="n">barplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">'club'</span> <span class="p">,</span> <span class="n">y</span>  <span class="o">=</span> <span class="s">'overall'</span> <span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">best_club</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">),</span><span class="n">palette</span><span class="o">=</span><span class="s">'rocket'</span><span class="p">)</span>  
<span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">rotation</span> <span class="o">=</span> <span class="mi">70</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"Club"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Sum of Overall Rating of players in club'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Clubs with best Players (sum of overall ratings of players per club)'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylim</span><span class="p">(</span><span class="mi">2450</span> <span class="p">,</span> <span class="mi">2600</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/FIFA19/output_40_0.png" alt="png" /></p>

<p>Ha, at the top.</p>

<p>Even Manchester United. Sweet, got 2 of my favorite clubs in the top 5.</p>

<hr />

<h3 id="popular-countries">Popular Countries</h3>

<h2 id="age-distribution-1">Age Distribution</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">countries</span> <span class="o">=</span> <span class="p">[</span><span class="s">'England'</span> <span class="p">,</span> <span class="s">'Brazil'</span> <span class="p">,</span> <span class="s">'Portugal'</span> <span class="p">,</span><span class="s">'Argentina'</span><span class="p">,</span>
             <span class="s">'Italy'</span> <span class="p">,</span> <span class="s">'Spain'</span> <span class="p">,</span> <span class="s">'Germany'</span> <span class="p">,</span><span class="s">'Netherlands'</span><span class="p">,</span><span class="s">'India'</span><span class="p">]</span>
</code></pre></div></div>

<p>India, you ask? Can’t not. My country afer all!</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fifa_country_age</span> <span class="o">=</span> <span class="n">fifa</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">fifa</span><span class="p">[</span><span class="s">'Nationality'</span><span class="p">].</span><span class="n">isin</span><span class="p">(</span><span class="n">countries</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">fifa</span><span class="p">[</span><span class="s">'Age'</span><span class="p">]]</span>
<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span> <span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span> <span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="n">violinplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">'Nationality'</span> <span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="s">'Age'</span> <span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">fifa_country_age</span><span class="p">,</span> <span class="n">palette</span><span class="o">=</span><span class="s">'rocket'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Age Distribution in famous clubs'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">rotation</span> <span class="o">=</span> <span class="mi">50</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/FIFA19/output_46_0.png" alt="png" /></p>

<p>Looks like it might finally be good times for England maybe?</p>

<p>But hey, Spain and Germany aren’t too far behind either.</p>

<p>Guess the Overall Rating can tell us more.</p>

<h2 id="overall-rating-1">Overall Rating</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fifa_country_rating</span> <span class="o">=</span> <span class="n">fifa</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">fifa</span><span class="p">[</span><span class="s">'Nationality'</span><span class="p">].</span><span class="n">isin</span><span class="p">(</span><span class="n">countries</span><span class="p">)</span> <span class="o">&amp;</span> <span class="n">fifa</span><span class="p">[</span><span class="s">'Overall'</span><span class="p">]]</span>
<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span> <span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span> <span class="p">,</span><span class="mi">7</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="n">violinplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">'Nationality'</span> <span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="s">'Overall'</span> <span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">fifa_country_age</span><span class="p">,</span> <span class="n">palette</span><span class="o">=</span><span class="s">'rocket'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Overall Rating Distribution in famous clubs'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">rotation</span> <span class="o">=</span> <span class="mi">50</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/FIFA19/output_49_0.png" alt="png" /></p>

<p>Brazil really seems to be pretty dominant here. Must be the experienced players, as the previous plost have shown us.</p>

<h2 id="the-best-country">The Best Country?</h2>

<p>Germany might be there at the top, along with Spain maybe?</p>

<p>What do you think?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">best_dict</span> <span class="o">=</span> <span class="p">{}</span>
<span class="k">for</span> <span class="n">country</span> <span class="ow">in</span> <span class="n">fifa</span><span class="p">[</span><span class="s">'Nationality'</span><span class="p">].</span><span class="n">unique</span><span class="p">():</span>
    <span class="n">overall_rating</span> <span class="o">=</span> <span class="n">fifa</span><span class="p">[</span><span class="s">'Overall'</span><span class="p">][</span><span class="n">fifa</span><span class="p">[</span><span class="s">'Nationality'</span><span class="p">]</span> <span class="o">==</span> <span class="n">country</span><span class="p">].</span><span class="nb">sum</span><span class="p">()</span>
    <span class="n">best_dict</span><span class="p">[</span><span class="n">country</span><span class="p">]</span> <span class="o">=</span> <span class="n">overall_rating</span>
<span class="n">best_country</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">.</span><span class="n">from_dict</span><span class="p">(</span><span class="n">best_dict</span><span class="p">,</span><span class="n">orient</span><span class="o">=</span><span class="s">'index'</span><span class="p">,</span> <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'overall'</span><span class="p">])</span>
<span class="n">best_country</span><span class="p">[</span><span class="s">'club'</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_country</span><span class="p">.</span><span class="n">index</span>
<span class="n">best_country</span> <span class="o">=</span> <span class="n">best_country</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">'overall'</span> <span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span>  <span class="bp">False</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span> <span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span> <span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="n">barplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">'club'</span> <span class="p">,</span> <span class="n">y</span>  <span class="o">=</span> <span class="s">'overall'</span> <span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">best_country</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">),</span><span class="n">palette</span><span class="o">=</span><span class="s">'rocket'</span><span class="p">)</span>  
<span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">rotation</span> <span class="o">=</span> <span class="mi">70</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"Country"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Sum of Overall Rating of players in a country'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Countries with best Players (sum of overall ratings of players per club)'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/FIFA19/output_53_0.png" alt="png" /></p>

<p>England, wow, that’s just… well y’know.</p>

<p>But let’s put things into perspective.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">best_dict</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">for</span> <span class="n">country</span> <span class="ow">in</span> <span class="n">countries</span><span class="p">:</span>
    <span class="n">count</span> <span class="o">=</span> <span class="n">fifa</span><span class="p">[</span><span class="s">'Overall'</span><span class="p">][</span><span class="n">fifa</span><span class="p">[</span><span class="s">'Nationality'</span><span class="p">]</span> <span class="o">==</span> <span class="n">country</span><span class="p">].</span><span class="n">count</span><span class="p">()</span>
    <span class="n">best_dict</span><span class="p">[</span><span class="n">country</span><span class="p">]</span> <span class="o">=</span> <span class="n">count</span>
<span class="n">best_country</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">.</span><span class="n">from_dict</span><span class="p">(</span><span class="n">best_dict</span><span class="p">,</span><span class="n">orient</span><span class="o">=</span><span class="s">'index'</span><span class="p">,</span> <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'count'</span><span class="p">])</span>
<span class="n">best_country</span><span class="p">[</span><span class="s">'club'</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_country</span><span class="p">.</span><span class="n">index</span>

<span class="n">sns</span><span class="p">.</span><span class="n">barplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">'club'</span> <span class="p">,</span> <span class="n">y</span>  <span class="o">=</span> <span class="s">'count'</span> <span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">best_country</span><span class="p">,</span> <span class="n">palette</span><span class="o">=</span><span class="s">'rocket'</span><span class="p">)</span>  
<span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">rotation</span> <span class="o">=</span> <span class="mi">70</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"Country"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Count of players in a country'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/FIFA19/output_55_0.png" alt="png" /></p>

<p>And this is where we realise that England just has a lot of players who’re probably just average.</p>

<p>But let’s visualize that as well.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">best_dict</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">for</span> <span class="n">country</span> <span class="ow">in</span> <span class="n">countries</span><span class="p">:</span>
    <span class="n">overall</span> <span class="o">=</span> <span class="n">fifa</span><span class="p">[</span><span class="s">'Overall'</span><span class="p">][</span><span class="n">fifa</span><span class="p">[</span><span class="s">'Nationality'</span><span class="p">]</span> <span class="o">==</span> <span class="n">country</span><span class="p">].</span><span class="nb">sum</span><span class="p">()</span>
    <span class="n">count</span> <span class="o">=</span> <span class="n">fifa</span><span class="p">[</span><span class="s">'Overall'</span><span class="p">][</span><span class="n">fifa</span><span class="p">[</span><span class="s">'Nationality'</span><span class="p">]</span> <span class="o">==</span> <span class="n">country</span><span class="p">].</span><span class="n">count</span><span class="p">()</span>
    <span class="n">country_overall</span> <span class="o">=</span> <span class="n">overall</span> <span class="o">/</span> <span class="n">count</span>
    <span class="n">best_dict</span><span class="p">[</span><span class="n">country</span><span class="p">]</span> <span class="o">=</span> <span class="n">country_overall</span>
<span class="n">best_country</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">.</span><span class="n">from_dict</span><span class="p">(</span><span class="n">best_dict</span><span class="p">,</span><span class="n">orient</span><span class="o">=</span><span class="s">'index'</span><span class="p">,</span> <span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="s">'country_overall'</span><span class="p">])</span>
<span class="n">best_country</span><span class="p">[</span><span class="s">'club'</span><span class="p">]</span> <span class="o">=</span> <span class="n">best_country</span><span class="p">.</span><span class="n">index</span>

<span class="n">sns</span><span class="p">.</span><span class="n">barplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">'club'</span> <span class="p">,</span> <span class="n">y</span>  <span class="o">=</span> <span class="s">'country_overall'</span> <span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">best_country</span><span class="p">,</span> <span class="n">palette</span><span class="o">=</span><span class="s">'rocket'</span><span class="p">)</span>  
<span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">rotation</span> <span class="o">=</span> <span class="mi">70</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"Country"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Count of players in a country'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/FIFA19/output_57_0.png" alt="png" /></p>

<p>Hey, look. India is pretty close to England now huh?</p>

<p><strong>Now before you get triggered</strong>, for those of you that don’t understand this, take a better look at the dataset.
It contains a list of <strong>all the players who are from England, not just those who play for the National Team.</strong></p>

<p>Hence this is an accurate reprsentation of all the players from England, not their national team as such.</p>

<p>If you did want to visualise their national team, you’ll need to provide Player Names as well.</p>

<h3 id="positions-of-players">Positions of Players</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span> <span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span> <span class="p">,</span> <span class="mi">6</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="n">countplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span> <span class="s">'Position'</span> <span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">fifa</span> <span class="p">,</span> <span class="n">palette</span> <span class="o">=</span> <span class="s">'rocket'</span> <span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Count Plot of Postions of player'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/FIFA19/output_60_0.png" alt="png" /></p>

<p>Pretty much what is expected.</p>

<p>But let’s look at the features that are most common to each position.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Let's define the various player features
</span><span class="n">player_features</span> <span class="o">=</span> <span class="p">[</span><span class="s">'Crossing'</span><span class="p">,</span> <span class="s">'Finishing'</span><span class="p">,</span> <span class="s">'HeadingAccuracy'</span><span class="p">,</span>
       <span class="s">'ShortPassing'</span><span class="p">,</span> <span class="s">'Volleys'</span><span class="p">,</span> <span class="s">'Dribbling'</span><span class="p">,</span> <span class="s">'Curve'</span><span class="p">,</span> <span class="s">'FKAccuracy'</span><span class="p">,</span>
       <span class="s">'LongPassing'</span><span class="p">,</span> <span class="s">'BallControl'</span><span class="p">,</span> <span class="s">'Acceleration'</span><span class="p">,</span> <span class="s">'SprintSpeed'</span><span class="p">,</span>
       <span class="s">'Agility'</span><span class="p">,</span> <span class="s">'Reactions'</span><span class="p">,</span> <span class="s">'Balance'</span><span class="p">,</span> <span class="s">'ShotPower'</span><span class="p">,</span> <span class="s">'Jumping'</span><span class="p">,</span>
       <span class="s">'Stamina'</span><span class="p">,</span> <span class="s">'Strength'</span><span class="p">,</span> <span class="s">'LongShots'</span><span class="p">,</span> <span class="s">'Aggression'</span><span class="p">,</span> <span class="s">'Interceptions'</span><span class="p">,</span>
       <span class="s">'Positioning'</span><span class="p">,</span> <span class="s">'Vision'</span><span class="p">,</span> <span class="s">'Penalties'</span><span class="p">,</span> <span class="s">'Composure'</span><span class="p">,</span> <span class="s">'Marking'</span><span class="p">,</span>
       <span class="s">'StandingTackle'</span><span class="p">,</span> <span class="s">'SlidingTackle'</span><span class="p">,</span> <span class="s">'GKDiving'</span><span class="p">,</span> <span class="s">'GKHandling'</span><span class="p">,</span>
       <span class="s">'GKKicking'</span><span class="p">,</span> <span class="s">'GKPositioning'</span><span class="p">,</span> <span class="s">'GKReflexes'</span><span class="p">]</span>

<span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">val</span> <span class="ow">in</span> <span class="n">fifa</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="n">fifa</span><span class="p">[</span><span class="s">'Position'</span><span class="p">])[</span><span class="n">player_features</span><span class="p">].</span><span class="n">mean</span><span class="p">().</span><span class="n">iterrows</span><span class="p">():</span>
    <span class="k">print</span><span class="p">(</span><span class="s">'Position {}: {}, {}, {}, {}, {}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="o">*</span><span class="nb">tuple</span><span class="p">(</span><span class="n">val</span><span class="p">.</span><span class="n">nlargest</span><span class="p">(</span><span class="mi">5</span><span class="p">).</span><span class="n">index</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Position CAM: Balance, Agility, Acceleration, SprintSpeed, BallControl
Position CB: Strength, Jumping, StandingTackle, Aggression, HeadingAccuracy
Position CDM: Stamina, Aggression, Strength, ShortPassing, Jumping
Position CF: Agility, Balance, Acceleration, SprintSpeed, Dribbling
Position CM: Balance, ShortPassing, Agility, Stamina, Acceleration
Position GK: GKReflexes, GKDiving, GKPositioning, GKHandling, GKKicking
Position LAM: Agility, Balance, SprintSpeed, Acceleration, Dribbling
Position LB: SprintSpeed, Acceleration, Stamina, Balance, Agility
Position LCB: Strength, Jumping, StandingTackle, Aggression, HeadingAccuracy
Position LCM: Stamina, ShortPassing, Balance, Agility, BallControl
Position LDM: Stamina, ShortPassing, Strength, Aggression, BallControl
Position LF: Balance, Agility, Acceleration, Dribbling, BallControl
Position LM: Acceleration, SprintSpeed, Agility, Balance, Dribbling
Position LS: SprintSpeed, Strength, Acceleration, ShotPower, Positioning
Position LW: Acceleration, SprintSpeed, Agility, Balance, Dribbling
Position LWB: SprintSpeed, Acceleration, Stamina, Agility, Balance
Position RAM: Agility, Balance, Acceleration, SprintSpeed, Dribbling
Position RB: SprintSpeed, Stamina, Acceleration, Balance, Jumping
Position RCB: Strength, Jumping, Aggression, StandingTackle, HeadingAccuracy
Position RCM: Stamina, ShortPassing, Agility, Balance, BallControl
Position RDM: Stamina, ShortPassing, Aggression, Strength, Jumping
Position RF: Agility, Acceleration, Balance, BallControl, SprintSpeed
Position RM: Acceleration, SprintSpeed, Agility, Balance, Dribbling
Position RS: SprintSpeed, Strength, Acceleration, Agility, ShotPower
Position RW: Acceleration, SprintSpeed, Agility, Balance, Dribbling
Position RWB: SprintSpeed, Acceleration, Stamina, Agility, Balance
Position ST: SprintSpeed, Strength, Acceleration, Jumping, Finishing
</code></pre></div></div>

<h1 id="the-top-10-players">The Top 10 Players</h1>

<p>Ah, the thing you’ve all been waiting for.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fifa_best_players</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">.</span><span class="n">copy</span><span class="p">(</span><span class="n">fifa</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">'Overall'</span> <span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span> <span class="p">).</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>

<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="mi">1</span> <span class="p">,</span> <span class="n">figsize</span> <span class="o">=</span> <span class="p">(</span><span class="mi">15</span> <span class="p">,</span> <span class="mi">5</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="n">barplot</span><span class="p">(</span><span class="n">x</span> <span class="o">=</span><span class="s">'Name'</span> <span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="s">'Overall'</span> <span class="p">,</span> <span class="n">data</span> <span class="o">=</span> <span class="n">fifa_best_players</span><span class="p">,</span><span class="n">palette</span><span class="o">=</span><span class="s">'rocket'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">ylim</span><span class="p">(</span><span class="mi">87</span> <span class="p">,</span> <span class="mi">95</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/FIFA19/output_65_0.png" alt="png" /></p>

<p>No surprises there (from FIFA’s standpoint at least).</p>

<h2 id="and-lastly-the-highest-earner">And lastly, The Highest Earner</h2>

<p>If you take a look at the dataset you see that the wage column has various represnetations of the currency., i.e M and K.</p>

<p>One way to deal with this is to convert everything to one base metric.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">normalizing_wage</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">if</span> <span class="s">'€'</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">)</span> <span class="ow">and</span> <span class="s">'M'</span> <span class="ow">in</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
        <span class="n">c</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'€'</span> <span class="p">,</span> <span class="s">''</span><span class="p">)</span>
        <span class="n">c</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">c</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'M'</span> <span class="p">,</span> <span class="s">''</span><span class="p">)</span>
        <span class="n">c</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000000</span>

    <span class="k">else</span><span class="p">:</span>
        <span class="n">c</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'€'</span> <span class="p">,</span> <span class="s">''</span><span class="p">)</span>
        <span class="n">c</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">c</span><span class="p">).</span><span class="n">replace</span><span class="p">(</span><span class="s">'K'</span> <span class="p">,</span> <span class="s">''</span><span class="p">)</span>
        <span class="n">c</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">c</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span>

    <span class="k">return</span> <span class="n">c</span>

<span class="n">fifa</span><span class="p">[</span><span class="s">'Normalized_Wage'</span><span class="p">]</span> <span class="o">=</span> <span class="n">fifa</span><span class="p">[</span><span class="s">'Wage'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span> <span class="p">:</span> <span class="n">normalizing_wage</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fifa</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span> <span class="o">=</span> <span class="s">'Normalized_Wage'</span> <span class="p">,</span> <span class="n">ascending</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)[[</span><span class="s">'Name'</span><span class="p">,</span><span class="s">'Club'</span><span class="p">,</span><span class="s">'Nationality'</span><span class="p">,</span><span class="s">'Overall'</span><span class="p">,</span>
<span class="s">'Age'</span><span class="p">,</span><span class="s">'Normalized_Wage'</span><span class="p">,</span><span class="s">'Wage'</span><span class="p">]].</span><span class="n">head</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Name</th>
      <th>Club</th>
      <th>Nationality</th>
      <th>Overall</th>
      <th>Age</th>
      <th>Normalized_Wage</th>
      <th>Wage</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>L. Messi</td>
      <td>FC Barcelona</td>
      <td>Argentina</td>
      <td>94</td>
      <td>31</td>
      <td>565000.0</td>
      <td>€565K</td>
    </tr>
    <tr>
      <th>7</th>
      <td>L. Suárez</td>
      <td>FC Barcelona</td>
      <td>Uruguay</td>
      <td>91</td>
      <td>31</td>
      <td>455000.0</td>
      <td>€455K</td>
    </tr>
    <tr>
      <th>6</th>
      <td>L. Modrić</td>
      <td>Real Madrid</td>
      <td>Croatia</td>
      <td>91</td>
      <td>32</td>
      <td>420000.0</td>
      <td>€420K</td>
    </tr>
    <tr>
      <th>1</th>
      <td>Cristiano Ronaldo</td>
      <td>Juventus</td>
      <td>Portugal</td>
      <td>94</td>
      <td>33</td>
      <td>405000.0</td>
      <td>€405K</td>
    </tr>
    <tr>
      <th>8</th>
      <td>Sergio Ramos</td>
      <td>Real Madrid</td>
      <td>Spain</td>
      <td>91</td>
      <td>32</td>
      <td>380000.0</td>
      <td>€380K</td>
    </tr>
  </tbody>
</table>
</div>]]></content><author><name>Rohit Midha</name></author><category term="blog" /><category term="data visualization" /><category term="data analytics" /><category term="pandas" /><summary type="html"><![CDATA[I’ve always loved football.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/FIFA19/fifalogo.png" /><media:content medium="image" url="http://localhost:4000/assets/images/FIFA19/fifalogo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">:pushpin: Featured Blog Posts :star:</title><link href="http://localhost:4000/Featured-Blog-Posts/" rel="alternate" type="text/html" title=":pushpin: Featured Blog Posts :star:" /><published>2019-03-25T10:00:00+00:00</published><updated>2019-03-25T10:00:00+00:00</updated><id>http://localhost:4000/Featured-Blog-Posts</id><content type="html" xml:base="http://localhost:4000/Featured-Blog-Posts/"><![CDATA[<p>This blog post will be constantly updated with all my articles that have been featured on various portals.</p>
<h1 id="datacamp-weekly">DataCamp Weekly</h1>

<h2 id="data-visualisation-with-matplotlib">Data Visualisation with Matplotlib</h2>
<h3 id="-issue-81-"><em> Issue 81 </em></h3>
<p><strong>Find it <a href="https://www.datacamp.com/community/news/data-visualization-with-matplotlib-08jy72bvzx38">here</a>.</strong></p>

<hr />

<h2 id="numpy-explained">Numpy Explained</h2>
<h3 id="-issue-80-"><em> Issue 80 </em></h3>
<p><strong>Find it <a href="https://www.datacamp.com/community/news/numpy-explained-r5yarl75l7">here</a>.</strong></p>

<hr />

<h2 id="pandas-explained">Pandas Explained</h2>
<h3 id="-issue-79-"><em> Issue 79 </em></h3>
<p><strong>Find it <a href="https://www.datacamp.com/community/news/pandas-explained-8klfektnwya">here</a>.</strong></p>

<hr />

<h2 id="binarify">Binarify</h2>
<h3 id="-issue-79--1"><em> Issue 79 </em></h3>
<p><strong>Find it <a href="https://www.datacamp.com/community/news/binarify-convert-images-to-binary-art-a5h8vc891t5">here</a>.</strong></p>

<hr />

<h1 id="geeksforgeeks">GeeksForGeeks</h1>
<h2 id="groupby-with-dictionary">Groupby with Dictionary</h2>
<p><strong>Find it <a href="https://www.geeksforgeeks.org/combining-multiple-columns-in-pandas-groupby-with-dictionary/">here</a>.</strong></p>

<hr />

<h2 id="breaking-up-a-string-into-columns-using-regex">Breaking up a String into columns using regex</h2>
<p><strong>Find it <a href="https://www.geeksforgeeks.org/split-a-string-into-columns-using-regex-in-pandas-dataframe/">here</a>.</strong></p>

<hr />

<h2 id="ranking-rows-in-pandas">Ranking Rows in Pandas</h2>
<p><strong>Find it <a href="https://www.geeksforgeeks.org/ranking-rows-of-pandas-dataframe/">here</a>.</strong></p>

<hr />]]></content><author><name>Rohit Midha</name></author><category term="blog" /><category term="featured" /><summary type="html"><![CDATA[This blog post will be constantly updated with all my articles that have been featured on various portals. DataCamp Weekly]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/star.jpg" /><media:content medium="image" url="http://localhost:4000/assets/images/star.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Colab Tricks</title><link href="http://localhost:4000/Colab-Tricks/" rel="alternate" type="text/html" title="Colab Tricks" /><published>2019-03-25T01:00:00+00:00</published><updated>2019-03-25T01:00:00+00:00</updated><id>http://localhost:4000/Colab-Tricks</id><content type="html" xml:base="http://localhost:4000/Colab-Tricks/"><![CDATA[<p>A collection of a few python scripts I have found to be useful as and when I have used Colab.</p>

<p>This list will be updated as and when I find cooler tricks!</p>

<h1 id="contents">Contents</h1>

<ul>
  <li><a href="#upload-computer-file-into-colab">Upload Computer File into Colab</a></li>
  <li><a href="#download-computer-file-into-colab">Download Computer File into Colab</a></li>
  <li><a href="#download-and-unzip-file-stored-in-colab">Download and Unzip File stored in Colab</a></li>
  <li><a href="#download-and-unzip-file-stored-in-colab">Download and Unzip File stored in Colab</a></li>
  <li><a href="#mounting-your-google-drive-as-a-folder">Mounting your Google Drive as a Folder</a></li>
  <li><a href="#send-alert-email-at-finish-with-gmail">Send Alert Email at finish with GMail</a></li>
  <li><a href="#know-your-ram-and-gpu-memory">Know your RAM and GPU Memory</a></li>
  <li><a href="#show-gpu-memory-while-training">Show GPU Memory while Training</a></li>
</ul>

<hr />

<h3 id="upload-computer-file-into-colab">Upload Computer File into Colab</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">google.colab</span> <span class="kn">import</span> <span class="n">files</span>
<span class="n">uploaded</span> <span class="o">=</span> <span class="n">files</span><span class="p">.</span><span class="n">upload</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h3 id="download-computer-file-into-colab">Download Computer File into Colab</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">files</span><span class="p">.</span><span class="n">download</span><span class="p">(</span><span class="s">'saved_file.h5'</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h3 id="download-and-unzip-file-stored-in-colab">Download and Unzip File stored in Colab</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">U</span> <span class="o">-</span><span class="n">q</span> <span class="n">PyDrive</span>

<span class="c1"># Insert your file ID
# Get it by generating a share URL for the file
# An example : https://drive.google.com/file/d/1iz5JmTB4YcBvO7amj3Sy2_scSeAsN4gd/view?usp=sharing
</span><span class="n">zip_id</span> <span class="o">=</span> <span class="s">'1iz5JmTB4YcBvO7amj3Sy2_scSeAsN4gd'</span>

<span class="kn">from</span> <span class="nn">pydrive.auth</span> <span class="kn">import</span> <span class="n">GoogleAuth</span>
<span class="kn">from</span> <span class="nn">pydrive.drive</span> <span class="kn">import</span> <span class="n">GoogleDrive</span>
<span class="kn">from</span> <span class="nn">google.colab</span> <span class="kn">import</span> <span class="n">auth</span>
<span class="kn">from</span> <span class="nn">oauth2client.client</span> <span class="kn">import</span> <span class="n">GoogleCredentials</span>
<span class="kn">import</span> <span class="nn">zipfile</span><span class="p">,</span> <span class="n">os</span>

<span class="c1"># 1. Authenticate and create the PyDrive client.
</span><span class="n">auth</span><span class="p">.</span><span class="n">authenticate_user</span><span class="p">()</span>
<span class="n">gauth</span> <span class="o">=</span> <span class="n">GoogleAuth</span><span class="p">()</span>
<span class="n">gauth</span><span class="p">.</span><span class="n">credentials</span> <span class="o">=</span> <span class="n">GoogleCredentials</span><span class="p">.</span><span class="n">get_application_default</span><span class="p">()</span>
<span class="n">drive</span> <span class="o">=</span> <span class="n">GoogleDrive</span><span class="p">(</span><span class="n">gauth</span><span class="p">)</span>

<span class="k">if</span> <span class="ow">not</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">'MODEL'</span><span class="p">):</span>
    <span class="n">os</span><span class="p">.</span><span class="n">makedirs</span><span class="p">(</span><span class="s">'MODEL'</span><span class="p">)</span>

<span class="c1"># 2. Download Zip
</span><span class="k">print</span> <span class="p">(</span><span class="s">"Downloading zip file"</span><span class="p">)</span>
<span class="n">myzip</span> <span class="o">=</span> <span class="n">drive</span><span class="p">.</span><span class="n">CreateFile</span><span class="p">({</span><span class="s">'id'</span><span class="p">:</span> <span class="n">zip_id</span><span class="p">})</span>
<span class="n">myzip</span><span class="p">.</span><span class="n">GetContentFile</span><span class="p">(</span><span class="s">'model.zip'</span><span class="p">)</span>

<span class="c1"># 3. Unzip
</span><span class="k">print</span> <span class="p">(</span><span class="s">"Uncompressing zip file"</span><span class="p">)</span>
<span class="n">zip_ref</span> <span class="o">=</span> <span class="n">zipfile</span><span class="p">.</span><span class="n">ZipFile</span><span class="p">(</span><span class="s">'model.zip'</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
<span class="n">zip_ref</span><span class="p">.</span><span class="n">extractall</span><span class="p">(</span><span class="s">'MODEL/'</span><span class="p">)</span>
<span class="n">zip_ref</span><span class="p">.</span><span class="n">close</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h3 id="zip-and-upload-folder-to-drive">Zip and Upload Folder to Drive</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="o">-</span><span class="n">U</span> <span class="o">-</span><span class="n">q</span> <span class="n">PyDrive</span>

<span class="kn">from</span> <span class="nn">google.colab</span> <span class="kn">import</span> <span class="n">files</span>
<span class="kn">from</span> <span class="nn">pydrive.auth</span> <span class="kn">import</span> <span class="n">GoogleAuth</span>
<span class="kn">from</span> <span class="nn">pydrive.drive</span> <span class="kn">import</span> <span class="n">GoogleDrive</span>
<span class="kn">from</span> <span class="nn">google.colab</span> <span class="kn">import</span> <span class="n">auth</span>
<span class="kn">from</span> <span class="nn">oauth2client.client</span> <span class="kn">import</span> <span class="n">GoogleCredentials</span>
<span class="kn">import</span> <span class="nn">zipfile</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">sys</span>

<span class="n">zipname</span> <span class="o">=</span> <span class="s">'model_v0.1'</span>

<span class="k">def</span> <span class="nf">zipfolder</span><span class="p">(</span><span class="n">foldername</span><span class="p">,</span> <span class="n">target_dir</span><span class="p">):</span>            
    <span class="n">zipobj</span> <span class="o">=</span> <span class="n">zipfile</span><span class="p">.</span><span class="n">ZipFile</span><span class="p">(</span><span class="n">foldername</span> <span class="o">+</span> <span class="s">'.zip'</span><span class="p">,</span> <span class="s">'w'</span><span class="p">,</span> <span class="n">zipfile</span><span class="p">.</span><span class="n">ZIP_DEFLATED</span><span class="p">)</span>
    <span class="n">rootlen</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">target_dir</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="n">base</span><span class="p">,</span> <span class="n">dirs</span><span class="p">,</span> <span class="n">files</span> <span class="ow">in</span> <span class="n">os</span><span class="p">.</span><span class="n">walk</span><span class="p">(</span><span class="n">target_dir</span><span class="p">):</span>
        <span class="k">for</span> <span class="nb">file</span> <span class="ow">in</span> <span class="n">files</span><span class="p">:</span>
            <span class="n">fn</span> <span class="o">=</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">base</span><span class="p">,</span> <span class="nb">file</span><span class="p">)</span>
            <span class="n">zipobj</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">fn</span><span class="p">,</span> <span class="n">fn</span><span class="p">[</span><span class="n">rootlen</span><span class="p">:])</span>

<span class="n">zipfolder</span><span class="p">(</span><span class="n">zipname</span><span class="p">,</span> <span class="s">'/content/MODEL/'</span><span class="p">)</span>

<span class="c1"># 1. Authenticate and create the PyDrive client.
</span><span class="n">auth</span><span class="p">.</span><span class="n">authenticate_user</span><span class="p">()</span>
<span class="n">gauth</span> <span class="o">=</span> <span class="n">GoogleAuth</span><span class="p">()</span>
<span class="n">gauth</span><span class="p">.</span><span class="n">credentials</span> <span class="o">=</span> <span class="n">GoogleCredentials</span><span class="p">.</span><span class="n">get_application_default</span><span class="p">()</span>
<span class="n">drive</span> <span class="o">=</span> <span class="n">GoogleDrive</span><span class="p">(</span><span class="n">gauth</span><span class="p">)</span>

<span class="c1"># 2. Create &amp; upload a file text file.
</span><span class="n">file1</span> <span class="o">=</span> <span class="n">drive</span><span class="p">.</span><span class="n">CreateFile</span><span class="p">()</span>
<span class="n">file1</span><span class="p">.</span><span class="n">SetContentFile</span><span class="p">(</span><span class="n">zipname</span><span class="o">+</span><span class="s">".zip"</span><span class="p">)</span>
<span class="n">file1</span><span class="p">.</span><span class="n">Upload</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h3 id="mounting-your-google-drive-as-a-folder">Mounting your Google Drive as a Folder</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">from</span> <span class="nn">google.colab</span> <span class="kn">import</span> <span class="n">drive</span>
<span class="n">drive</span><span class="p">.</span><span class="n">mount</span><span class="p">(</span><span class="s">'/content/gdrive'</span><span class="p">,</span><span class="n">force_remount</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<hr />

<h3 id="send-alert-email-at-finish-with-gmail">Send Alert Email at finish with GMail</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kn">import</span> <span class="nn">smtplib</span>

<span class="n">server</span> <span class="o">=</span> <span class="n">smtplib</span><span class="p">.</span><span class="n">SMTP</span><span class="p">(</span><span class="s">'smtp.gmail.com'</span><span class="p">,</span> <span class="mi">587</span><span class="p">)</span>
<span class="n">server</span><span class="p">.</span><span class="n">starttls</span><span class="p">()</span>
<span class="n">server</span><span class="p">.</span><span class="n">login</span><span class="p">(</span><span class="s">"sender_gmail_here@gmail.com"</span><span class="p">,</span> <span class="s">"your_password_here"</span><span class="p">)</span>

<span class="n">msg</span> <span class="o">=</span> <span class="s">"COLAB WORK FINISH ALERT!"</span>
<span class="n">server</span><span class="p">.</span><span class="n">sendmail</span><span class="p">(</span><span class="s">"sender_gmail_here@gmail.com"</span><span class="p">,</span> <span class="s">"receiver_gmail_here@gmail.com"</span><span class="p">,</span> <span class="n">msg</span><span class="p">)</span>
<span class="n">server</span><span class="p">.</span><span class="n">quit</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h3 id="know-your-ram-and-gpu-memory">Know your RAM and GPU Memory</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># memory footprint support libraries/code
</span><span class="err">!</span><span class="n">ln</span> <span class="o">-</span><span class="n">sf</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">nvidia</span><span class="o">-</span><span class="n">smi</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">nvidia</span><span class="o">-</span><span class="n">smi</span>
<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">gputil</span>
<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">psutil</span>
<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">humanize</span>
<span class="kn">import</span> <span class="nn">psutil</span>
<span class="kn">import</span> <span class="nn">humanize</span>
<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">import</span> <span class="nn">GPUtil</span> <span class="k">as</span> <span class="n">GPU</span>
<span class="n">GPUs</span> <span class="o">=</span> <span class="n">GPU</span><span class="p">.</span><span class="n">getGPUs</span><span class="p">()</span>
<span class="c1"># XXX: only one GPU on Colab and isn’t guaranteed
</span><span class="n">gpu</span> <span class="o">=</span> <span class="n">GPUs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="k">def</span> <span class="nf">printm</span><span class="p">():</span>
  <span class="n">process</span> <span class="o">=</span> <span class="n">psutil</span><span class="p">.</span><span class="n">Process</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">getpid</span><span class="p">())</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"Gen RAM Free: "</span> <span class="o">+</span> <span class="n">humanize</span><span class="p">.</span><span class="n">naturalsize</span><span class="p">(</span> <span class="n">psutil</span><span class="p">.</span><span class="n">virtual_memory</span><span class="p">().</span><span class="n">available</span> <span class="p">),</span> <span class="s">" I Proc size: "</span> <span class="o">+</span> <span class="n">humanize</span><span class="p">.</span><span class="n">naturalsize</span><span class="p">(</span> <span class="n">process</span><span class="p">.</span><span class="n">memory_info</span><span class="p">().</span><span class="n">rss</span><span class="p">))</span>
  <span class="k">print</span><span class="p">(</span><span class="s">"GPU RAM Free: {0:.0f}MB | Used: {1:.0f}MB | Util {2:3.0f}% | Total {3:.0f}MB"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">gpu</span><span class="p">.</span><span class="n">memoryFree</span><span class="p">,</span> <span class="n">gpu</span><span class="p">.</span><span class="n">memoryUsed</span><span class="p">,</span> <span class="n">gpu</span><span class="p">.</span><span class="n">memoryUtil</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="n">gpu</span><span class="p">.</span><span class="n">memoryTotal</span><span class="p">))</span>
<span class="n">printm</span><span class="p">()</span>
</code></pre></div></div>

<hr />

<h3 id="show-gpu-memory-while-training">Show GPU Memory while Training</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">!</span><span class="n">ln</span> <span class="o">-</span><span class="n">sf</span> <span class="o">/</span><span class="n">opt</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">nvidia</span><span class="o">-</span><span class="n">smi</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">nvidia</span><span class="o">-</span><span class="n">smi</span>
<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">gputil</span>
<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">psutil</span>
<span class="err">!</span><span class="n">pip</span> <span class="n">install</span> <span class="n">humanize</span>
<span class="kn">import</span> <span class="nn">psutil</span>
<span class="kn">import</span> <span class="nn">humanize</span>
<span class="kn">import</span> <span class="nn">os</span><span class="p">,</span> <span class="n">time</span>
<span class="kn">import</span> <span class="nn">GPUtil</span> <span class="k">as</span> <span class="n">GPU</span>

<span class="n">GPUs</span> <span class="o">=</span> <span class="n">GPU</span><span class="p">.</span><span class="n">getGPUs</span><span class="p">()</span>
<span class="c1"># XXX: only one GPU on Colab and isn’t guaranteed
</span><span class="n">gpu</span> <span class="o">=</span> <span class="n">GPUs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="k">def</span> <span class="nf">worker</span><span class="p">():</span>
  <span class="k">if</span> <span class="n">SHOW_GPU_USAGE_TIME</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>
    <span class="k">return</span><span class="p">;</span>
  <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">process</span> <span class="o">=</span> <span class="n">psutil</span><span class="p">.</span><span class="n">Process</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">getpid</span><span class="p">())</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Gen RAM Free: "</span> <span class="o">+</span> <span class="n">humanize</span><span class="p">.</span><span class="n">naturalsize</span><span class="p">(</span> <span class="n">psutil</span><span class="p">.</span><span class="n">virtual_memory</span><span class="p">().</span><span class="n">available</span> <span class="p">),</span> <span class="s">" I Proc size: "</span> <span class="o">+</span> <span class="n">humanize</span><span class="p">.</span><span class="n">naturalsize</span><span class="p">(</span> <span class="n">process</span><span class="p">.</span><span class="n">memory_info</span><span class="p">().</span><span class="n">rss</span><span class="p">))</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"GPU RAM Free: {0:.0f}MB | Used: {1:.0f}MB | Util {2:3.0f}% | Total {3:.0f}MB"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">gpu</span><span class="p">.</span><span class="n">memoryFree</span><span class="p">,</span> <span class="n">gpu</span><span class="p">.</span><span class="n">memoryUsed</span><span class="p">,</span> <span class="n">gpu</span><span class="p">.</span><span class="n">memoryUtil</span><span class="o">*</span><span class="mi">100</span><span class="p">,</span> <span class="n">gpu</span><span class="p">.</span><span class="n">memoryTotal</span><span class="p">))</span>
    <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="n">SHOW_GPU_USAGE_TIME</span><span class="p">)</span>

<span class="kn">import</span> <span class="nn">threading</span>
<span class="n">t</span> <span class="o">=</span> <span class="n">threading</span><span class="p">.</span><span class="n">Thread</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">worker</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="s">'Monitor'</span><span class="p">)</span>
<span class="n">t</span><span class="p">.</span><span class="n">start</span><span class="p">()</span>
</code></pre></div></div>
<hr />]]></content><author><name>Rohit Midha</name></author><category term="blog" /><category term="colab" /><category term="google" /><category term="tutorial" /><summary type="html"><![CDATA[A collection of a few python scripts I have found to be useful as and when I have used Colab.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/ColabTricks/colab.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/images/ColabTricks/colab.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Data Visualization with Matplotlib</title><link href="http://localhost:4000/Matplotlib-Explained/" rel="alternate" type="text/html" title="Data Visualization with Matplotlib" /><published>2019-01-30T11:20:00+00:00</published><updated>2019-01-30T11:20:00+00:00</updated><id>http://localhost:4000/Matplotlib-Explained</id><content type="html" xml:base="http://localhost:4000/Matplotlib-Explained/"><![CDATA[<p>This is the third tutorial of the Explained! series.</p>

<p>I will be cataloging all the work I do with regards to PyLibraries and will share it here or on <a href="http://bit.ly/RohitMidha23GitHub">my Github</a>.</p>

<p>I will also be updating this post as and when I work on Matplotlib.</p>

<p>That being said, Dive in!</p>

<h1 id="data-visualization-with-matplotlib">Data Visualization with Matplotlib</h1>

<p>In the Python world, there are multiple tools for data visualizing:</p>
<ul>
  <li><a href="http://matplotlib.org"><strong>matplotlib</strong></a> produces publication quality figures in a variety of hardcopy formats and interactive environments across platforms; you can generate plots, histograms, power spectra, bar charts, errorcharts, scatterplots, etc., with just a few lines of code;</li>
  <li><a href="http://stanford.edu/~mwaskom/software/seaborn/index.html"><strong>Seaborn</strong></a> is a library for making attractive and informative statistical graphics in Python;</li>
</ul>

<p>and others (particularly, pandas also possesses with its own visualization funtionality).</p>

<p>Here, we will consider preferably matplotlib. Matplotlib is an excellent 2D and 3D graphics library for generating scientific, statistics, etc. figures. Some of the many advantages of this library include:</p>

<ul>
  <li>Easy</li>
  <li>Great control of every element in a figure, including figure size and DPI.</li>
  <li>High-quality output</li>
  <li>GUI for interactively exploring figures.</li>
</ul>

<h2 id="working-with-matplotlib">Working with Matplotlib</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="c1"># This line configures matplotlib to show figures embedded in the notebook,
# instead of opening a new window for each figure. More about that later.
</span><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
</code></pre></div></div>

<p>To create a simple line <code class="language-plaintext highlighter-rouge">matplotlib</code> plot you need to set two arrays for <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> coordinates of drawing points and them call the <code class="language-plaintext highlighter-rouge">plt.plot()</code> function.</p>

<p>pyplot is a part of the Matplotlib Package.
It can be imported like :</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
</code></pre></div></div>

<p>Let’s start with something cool and then move to the boring stuff, shall we?</p>

<h3 id="the-waves"><em>The Waves</em></h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="s">"""
numpy.arange([start, ]stop, [step, ]dtype=None)
    Return evenly spaced values within a given interval.
    Only stop value is required to be given.
    Default start = 0 and step = 1

"""</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">y2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">cos</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">y2</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/MatplotlibExplained/output_8_0.png" alt="png" /></p>

<h2 id="back-to-the-basics-"><em>Back to The Basics </em></h2>

<h3 id="bar-charts">Bar Charts</h3>

<p>A diagram in which the numerical values of variables are represented by the height or length of lines or rectangles of equal width.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">objects</span> <span class="o">=</span> <span class="p">(</span><span class="s">'Python'</span><span class="p">,</span> <span class="s">'C++'</span><span class="p">,</span> <span class="s">'Java'</span><span class="p">,</span> <span class="s">'Perl'</span><span class="p">,</span> <span class="s">'Scala'</span><span class="p">,</span> <span class="s">'Lisp'</span><span class="p">)</span>
<span class="n">x_pos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">objects</span><span class="p">))</span> <span class="c1"># Like the enumerate function.
</span><span class="n">performance</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">]</span> <span class="c1"># Y values for the plot
</span>
<span class="c1"># Plots the valueswith x_pos as X axis and Performance as Y axis
</span><span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">x_pos</span><span class="p">,</span> <span class="n">performance</span><span class="p">)</span>

<span class="c1"># Change X axis values to names from objects
</span><span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">x_pos</span><span class="p">,</span> <span class="n">objects</span><span class="p">)</span>

<span class="c1"># Assigns Label to Y axis
</span><span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Usage'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Programming Language Usage'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>

</code></pre></div></div>

<p><img src="/assets/images/MatplotlibExplained/output_11_0.png" alt="png" /></p>

<h3 id="pie-chart">Pie Chart</h3>

<p>A pie chart (or a circle chart) is a circular statistical graphic, which is divided into slices to illustrate numerical proportion.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="c1"># Data to plot
</span><span class="n">labels</span> <span class="o">=</span> <span class="p">(</span><span class="s">'Python'</span><span class="p">,</span> <span class="s">'C++'</span><span class="p">,</span> <span class="s">'Ruby'</span><span class="p">,</span> <span class="s">'Java'</span><span class="p">)</span>
<span class="n">sizes</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">11</span><span class="p">]</span>

<span class="c1"># Predefined color values
</span><span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s">'gold'</span><span class="p">,</span> <span class="s">'yellowgreen'</span><span class="p">,</span> <span class="s">'lightcoral'</span><span class="p">,</span> <span class="s">'lightskyblue'</span><span class="p">]</span>

<span class="c1"># Highlights a particular Value in plot
</span><span class="n">explode</span> <span class="o">=</span> <span class="p">(</span><span class="mf">0.1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>  <span class="c1"># Explode 1st slice
</span>
<span class="c1"># Plot
</span><span class="n">plt</span><span class="p">.</span><span class="n">pie</span><span class="p">(</span><span class="n">sizes</span><span class="p">,</span> <span class="n">explode</span><span class="o">=</span><span class="n">explode</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">labels</span><span class="p">,</span> <span class="n">colors</span><span class="o">=</span><span class="n">colors</span><span class="p">)</span>


<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/MatplotlibExplained/output_13_0.png" alt="png" /></p>

<h3 id="line-chart">Line Chart</h3>

<p>The statement:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">t</span> <span class="o">=</span> <span class="n">arange</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>
<p>defines start from 0, plot 20 items (length of our array) with steps of 1.
We’ll use this to get our X-Values for few examples.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">t</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Item (s)'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Value'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Python Line Chart'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/MatplotlibExplained/output_16_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">t</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">20.0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">s</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">20</span><span class="p">]</span>
<span class="n">s2</span> <span class="o">=</span> <span class="p">[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">13</span><span class="p">,</span><span class="mi">14</span><span class="p">,</span><span class="mi">15</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">17</span><span class="p">,</span><span class="mi">18</span><span class="p">,</span><span class="mi">19</span><span class="p">,</span><span class="mi">20</span><span class="p">,</span><span class="mi">21</span><span class="p">,</span><span class="mi">22</span><span class="p">,</span><span class="mi">23</span><span class="p">]</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">s</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">t</span><span class="p">,</span><span class="n">s2</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Item (s)'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Value'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Python Line Chart'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">grid</span><span class="p">(</span><span class="bp">True</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/MatplotlibExplained/output_17_0.png" alt="png" /></p>

<p>Okay, now that that’s taken care of, let’s try something like $y =x^2$</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">a</span><span class="o">=</span><span class="p">[]</span>
<span class="n">b</span><span class="o">=</span><span class="p">[]</span>
<span class="c1"># Try changing the range values to very small values
# Notice the change in output then
</span><span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="o">-</span><span class="mi">25000</span><span class="p">,</span><span class="mi">25000</span><span class="p">):</span>
    <span class="n">y</span><span class="o">=</span><span class="n">x</span><span class="o">**</span><span class="mi">2</span>
    <span class="n">a</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">b</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/MatplotlibExplained/output_19_0.png" alt="png" /></p>

<h2 id="subplots">Subplots</h2>

<p>Matplotlib allows for subplots to be added to each figure using it’s Object Oriented API. All long we’ve been using a global figure instance. We’re going to change that now and save the instance to a variable <code class="language-plaintext highlighter-rouge">fig</code>. From it we create a new axis instance <code class="language-plaintext highlighter-rouge">axes</code> using the <code class="language-plaintext highlighter-rouge">add_axes</code> method in the <code class="language-plaintext highlighter-rouge">Figure</code> class instance <code class="language-plaintext highlighter-rouge">fig</code>.</p>

<p>Too much theory? Try it out yourself below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">()</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">sin</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

<span class="c1"># main axes
</span><span class="n">axes1</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="n">add_axes</span><span class="p">([</span><span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">,</span> <span class="mf">0.9</span><span class="p">])</span>  <span class="c1"># left, bottom, width, height (range 0 to 1)
</span>
<span class="c1"># inner axes
</span><span class="n">axes2</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="n">add_axes</span><span class="p">([</span><span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">,</span> <span class="mf">0.4</span><span class="p">])</span>

<span class="c1"># main figure
</span><span class="n">axes1</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span> <span class="c1"># 'r' = red line
</span><span class="n">axes1</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'x'</span><span class="p">)</span>
<span class="n">axes1</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'y'</span><span class="p">)</span>
<span class="n">axes1</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Sine Wave'</span><span class="p">)</span>

<span class="c1"># inner figure
</span><span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">y2</span> <span class="o">=</span> <span class="n">x2</span> <span class="o">**</span> <span class="mi">2</span>
<span class="n">axes2</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x2</span><span class="p">,</span><span class="n">y2</span><span class="p">,</span> <span class="s">'g'</span><span class="p">)</span>   <span class="c1"># 'g' = green line
</span><span class="n">axes2</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'x2'</span><span class="p">)</span>
<span class="n">axes2</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'y2'</span><span class="p">)</span>
<span class="n">axes2</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Square Wave'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/MatplotlibExplained/output_22_0.png" alt="png" /></p>

<p>If you don’t care about the specific location of second graph, try:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">nrows</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">ncols</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="o">-</span><span class="mi">5</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span>
<span class="n">i</span><span class="o">=</span><span class="mi">1</span>
<span class="k">for</span> <span class="n">ax</span> <span class="ow">in</span> <span class="n">axes</span><span class="p">:</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'x'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'y'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Square Wave '</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
    <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
</code></pre></div></div>

<p><img src="/assets/images/MatplotlibExplained/output_24_0.png" alt="png" /></p>

<p>That was easy, but it isn’t so pretty with overlapping figure axes and labels, right?</p>

<p>We can deal with that by using the <code class="language-plaintext highlighter-rouge">fig.tight_layout</code> method, which automatically adjusts the positions of the axes on the figure canvas so that there is no overlapping content. Moreover, the size of figure is fixed by default, i.e. it does not change depending on the subplots amount on the figure.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">nrows</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">ncols</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mf">0.1</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span>
<span class="n">i</span><span class="o">=</span><span class="mi">1</span>
<span class="k">for</span> <span class="n">ax</span> <span class="ow">in</span> <span class="n">axes</span><span class="p">:</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">**</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="s">'r'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'x'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'y'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Wave '</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
    <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
<span class="n">fig</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/MatplotlibExplained/output_26_0.png" alt="png" /></p>

<p>Above set of plots can be obtained also using <code class="language-plaintext highlighter-rouge">add_subplot</code> method of <code class="language-plaintext highlighter-rouge">figure</code> object.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">()</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">):</span>
    <span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="p">.</span><span class="n">add_subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span>   <span class="c1"># (rows amount, columns amount, subplot number)
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="o">**</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span> <span class="s">'r'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'x'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'y'</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'Wave '</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">))</span>
    <span class="c1"># clear x and y ticks
</span>    <span class="c1"># ax.set_xticks([])
</span>    <span class="c1"># ax.set_yticks([])
</span><span class="n">fig</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/MatplotlibExplained/output_28_0.png" alt="png" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ncols</span><span class="p">,</span> <span class="n">nrows</span> <span class="o">=</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">3</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">nrows</span><span class="p">,</span> <span class="n">ncols</span><span class="p">)</span>

<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">nrows</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">ncols</span><span class="p">):</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">].</span><span class="n">set_xticks</span><span class="p">([])</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">].</span><span class="n">set_yticks</span><span class="p">([])</span>
        <span class="n">axes</span><span class="p">[</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">].</span><span class="n">text</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="s">"axes[{}, {}]"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">),</span>
                        <span class="n">horizontalalignment</span><span class="o">=</span><span class="s">'center'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/images/MatplotlibExplained/output_29_0.png" alt="png" /></p>

<p><code class="language-plaintext highlighter-rouge">subplot2grid</code> is a helper function that is similar to <code class="language-plaintext highlighter-rouge">plt.subplot</code> but uses 0-based indexing and let subplot to occupy multiple cells. Let’s to see how it works.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">()</span>

<span class="c1"># Let's remove all labels  on the axes
</span><span class="k">def</span> <span class="nf">clear_ticklabels</span><span class="p">(</span><span class="n">ax</span><span class="p">):</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_yticklabels</span><span class="p">([])</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_xticklabels</span><span class="p">([])</span>

<span class="n">ax0</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot2grid</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
<span class="n">ax1</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot2grid</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">))</span>
<span class="n">ax2</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot2grid</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">colspan</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">ax3</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot2grid</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="n">colspan</span><span class="o">=</span><span class="mi">3</span><span class="p">)</span>
<span class="n">ax4</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplot2grid</span><span class="p">((</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">),</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">),</span> <span class="n">rowspan</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>

<span class="n">axes</span> <span class="o">=</span> <span class="p">(</span><span class="n">ax0</span><span class="p">,</span> <span class="n">ax1</span><span class="p">,</span> <span class="n">ax2</span><span class="p">,</span> <span class="n">ax3</span><span class="p">,</span> <span class="n">ax4</span><span class="p">)</span>
<span class="c1"># Add all sublots
</span><span class="p">[</span><span class="n">ax</span><span class="p">.</span><span class="n">text</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="s">"ax{}"</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">n</span><span class="p">),</span> <span class="n">horizontalalignment</span><span class="o">=</span><span class="s">'center'</span><span class="p">)</span> <span class="k">for</span> <span class="n">n</span><span class="p">,</span> <span class="n">ax</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">axes</span><span class="p">)]</span>
<span class="c1"># Cleare labels on axes
</span><span class="p">[</span><span class="n">clear_ticklabels</span><span class="p">(</span><span class="n">ax</span><span class="p">)</span> <span class="k">for</span> <span class="n">ax</span> <span class="ow">in</span> <span class="n">axes</span><span class="p">]</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/assets/images/MatplotlibExplained/output_31_0.png" alt="png" /></p>

<h3 id="figure-size-aspect-ratio-and-dpi">Figure size, aspect ratio and DPI</h3>

<p>Matplotlib allows the aspect ratio, DPI and figure size to be specified when the <code class="language-plaintext highlighter-rouge">Figure</code> object is created, using the <code class="language-plaintext highlighter-rouge">figsize</code> and <code class="language-plaintext highlighter-rouge">dpi</code> keyword arguments. <code class="language-plaintext highlighter-rouge">figsize</code> is a tuple of the width and height of the figure in inches, and <code class="language-plaintext highlighter-rouge">dpi</code> is the dots-per-inch (pixel per inch). To create an 800x400 pixel, 100 dots-per-inch figure, we can do:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;Figure size 800x400 with 0 Axes&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span><span class="mi">3</span><span class="p">))</span>

<span class="n">axes</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="s">'r'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'x'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'y'</span><span class="p">)</span>
<span class="n">axes</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="s">'title'</span><span class="p">)</span>
</code></pre></div></div>

<h2><img src="/assets/images/MatplotlibExplained/output_35_1.png" alt="png" /></h2>

<!-- Place this tag where you want the button to render. -->
<p><a class="github-button" href="https://github.com/RohitMidha23" data-size="large" data-show-count="true" aria-label="Follow @RohitMidha23 on GitHub">Follow @RohitMidha23</a>
<!-- Place this tag in your head or just before your close body tag. -->
<script async="" defer="" src="https://buttons.github.io/buttons.js"></script></p>

<p>Find more at my Github repository <a href="http://bit.ly/ExplainedRepo">Explained</a>.</p>

<p>Show some :heart: by :star:ing it.</p>

<!-- Place this tag where you want the button to render. -->
<p><a class="github-button" href="https://github.com/RohitMidha23/Explained" data-size="large" data-show-count="true" aria-label="Star RohitMidha23/Explained on GitHub">Star</a>
<a href="http://bit.ly/2TGi2aE" class="github-corner" aria-label="View source on GitHub"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#fff; color:#151513; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style></p>]]></content><author><name>Rohit Midha</name></author><category term="blog" /><category term="matplotlib" /><category term="tutorial" /><category term="Explained" /><summary type="html"><![CDATA[This is the third tutorial of the Explained! series.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/MatplotlibExplained/pltlogo.png" /><media:content medium="image" url="http://localhost:4000/assets/images/MatplotlibExplained/pltlogo.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Introduction to Numpy</title><link href="http://localhost:4000/Numpy-Explained/" rel="alternate" type="text/html" title="Introduction to Numpy" /><published>2019-01-19T11:20:00+00:00</published><updated>2019-01-19T11:20:00+00:00</updated><id>http://localhost:4000/Numpy-Explained</id><content type="html" xml:base="http://localhost:4000/Numpy-Explained/"><![CDATA[<p>This is the second tutorial of the Explained! series.</p>

<p>I will be cataloging all the work I do with regards to PyLibraries and will share it here or on <a href="http://bit.ly/RohitMidha23GitHub">my Github</a>.</p>

<p>I will also be updating this post as and when I work on Numpy.</p>

<p>That being said, Dive in!</p>

<h2 id="numpy">Numpy</h2>

<p>NumPy is the fundamental package for scientific computing with Python.</p>

<p>In Python, data is almost universally represented as NumPy arrays. Even newer tools like Pandas are built around the NumPy array.</p>

<p>We will be seeing:</p>
<ol>
  <li>1D array, 2D array</li>
  <li>Array slices, joins, subsets</li>
  <li>Arithmetic Operations on 2D arrays</li>
  <li>Covariance, Correlation</li>
</ol>

<h3 id="initializing-numpy-arrays">Initializing Numpy Arrays</h3>

<ol>
  <li>Using np.array</li>
  <li>Using np.ndarray</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="c1"># seed for reproducibility
</span><span class="n">x1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="mi">6</span><span class="p">)</span>  <span class="c1"># One-dimensional array
</span><span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="n">size</span><span class="o">=</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">3</span><span class="p">))</span>  <span class="c1"># Two-dimensional array
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">x1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[5 0 3 3 7 9]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">x2</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[3 5 2]
 [4 7 6]
 [8 8 1]]
</code></pre></div></div>

<h1 id="using-nparray">Using np.array()</h1>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">x1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">x1</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1 2 3 4]
&lt;class 'numpy.ndarray'&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]])</span>
<span class="k">print</span><span class="p">(</span><span class="n">x2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">x2</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[1 2 3]
 [4 5 6]]
&lt;class 'numpy.ndarray'&gt;
</code></pre></div></div>

<h2 id="using-npndarray">Using np.ndarray()</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span> <span class="nb">buffer</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">]))</span>
<span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="mi">5</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1 2 3]
[1 2 3 5]
&lt;class 'numpy.ndarray'&gt;
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">float</span><span class="p">,</span><span class="nb">buffer</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mf">1.4</span><span class="p">,</span><span class="mf">2.5</span><span class="p">],[</span><span class="mf">1.3</span><span class="p">,</span><span class="mf">2.4</span><span class="p">]]))</span>
<span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[1.4 2.5]
 [1.3 2.4]]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">(</span><span class="n">shape</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">int</span><span class="p">,</span><span class="nb">buffer</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">]]))</span>
<span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[1 2]
 [1 2]]
</code></pre></div></div>

<h2 id="attributes-of-ndarray">Attributes of ndarray</h2>

<p>Each array has attributes <code class="language-plaintext highlighter-rouge">ndim</code> (the number of dimensions), <code class="language-plaintext highlighter-rouge">shape</code> (the size of each dimension), and <code class="language-plaintext highlighter-rouge">size</code> (the total size of the array):</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x2.ndim = "</span><span class="p">,</span><span class="n">x2</span><span class="p">.</span><span class="n">ndim</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x2.shape = "</span><span class="p">,</span><span class="n">x2</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x2.size = "</span><span class="p">,</span><span class="n">x2</span><span class="p">.</span><span class="n">size</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x2.ndim =  2
x2.shape =  (2, 3)
x2.size =  6
</code></pre></div></div>

<p>Another useful attribute is the <code class="language-plaintext highlighter-rouge">dtype</code> which tells you about the type of elements in the array:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"x2.dtype = "</span><span class="p">,</span><span class="n">x2</span><span class="p">.</span><span class="n">dtype</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x2.dtype =  int64
</code></pre></div></div>

<p>Other attributes include <code class="language-plaintext highlighter-rouge">itemsize</code>, which lists the size (in bytes) of each array element, and <code class="language-plaintext highlighter-rouge">nbytes</code>, which lists the total size (in bytes) of the array:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"itemsize:"</span><span class="p">,</span> <span class="n">x</span><span class="p">.</span><span class="n">itemsize</span><span class="p">,</span> <span class="s">"bytes"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"nbytes:"</span><span class="p">,</span> <span class="n">x2</span><span class="p">.</span><span class="n">nbytes</span><span class="p">,</span> <span class="s">"bytes"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>itemsize: 8 bytes
nbytes: 48 bytes
</code></pre></div></div>

<h2 id="array-indexing-accessing-single-elements">Array Indexing: Accessing Single Elements</h2>

<p>In a one-dimensional array, the ith value (counting from zero) can be accessed by specifying the desired index in square brackets, just as with Python lists:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x1 = "</span><span class="p">,</span><span class="n">x1</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x1[0] = "</span><span class="p">,</span><span class="n">x1</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1"># just like arrays in c/c++
</span><span class="k">print</span><span class="p">(</span><span class="s">"x1[-1] = "</span><span class="p">,</span><span class="n">x1</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="c1"># negative indexing just like lists
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x1 =  [1 2 3 4]
x1[0] =  1
x1[-1] =  4
</code></pre></div></div>

<p>In a multi-dimensional array, items can be accessed using a comma-separated tuple of indices:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x2 = "</span><span class="p">);</span> <span class="k">print</span><span class="p">(</span><span class="n">x2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x2[0] = "</span><span class="p">,</span><span class="n">x2</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span> <span class="c1"># will print the entire 1st row
</span>
<span class="c1"># to print 1st element of 1st row
</span><span class="k">print</span><span class="p">(</span><span class="s">"x2[0][0]= "</span><span class="p">,</span> <span class="n">x2</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x2[0,0] = "</span><span class="p">,</span><span class="n">x2</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">])</span>

<span class="c1"># to print 2nd element of 3rd row
</span><span class="k">print</span><span class="p">(</span><span class="s">"x2[2][1]= "</span><span class="p">,</span> <span class="n">x2</span><span class="p">[</span><span class="mi">2</span><span class="p">][</span><span class="mi">1</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x2[2,1]= "</span><span class="p">,</span> <span class="n">x2</span><span class="p">[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">])</span>

</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x2 =
[[1 2 3]
 [4 5 6]
 [7 8 9]]
x2[0] =  [1 2 3]
x2[0][0]=  1
x2[0,0] =  1
x2[2][1]=  8
x2[2,1]=  8
</code></pre></div></div>

<p>Values can also be modified using any of the above index notation:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x2</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">12</span>
<span class="k">print</span><span class="p">(</span><span class="n">x2</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[12  2  3]
 [ 4  5  6]
 [ 7  8  9]]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x2</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">14</span>
<span class="k">print</span><span class="p">(</span><span class="n">x2</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[14  2  3]
 [ 4  5  6]
 [ 7  8  9]]
</code></pre></div></div>

<p><strong>NOTE :</strong> Unlike Python lists, NumPy arrays have a fixed type. This means, for example, if you attempt to insert a floating-point value to an integer array, the value will be silently truncated.</p>

<p>i.e the float value gets converted to nearest int value.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x1</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="nb">buffer</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">]),</span><span class="n">dtype</span> <span class="o">=</span> <span class="nb">int</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">x1</span><span class="p">)</span>
<span class="n">x1</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="mf">5.7</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x1 after changing : "</span><span class="p">,</span><span class="n">x1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1 2 3 4 5]
x1 after changing :  [1 2 5 4 5]
</code></pre></div></div>

<h2 id="array-slicing-and-subsetting--accessing-subarrays">Array Slicing and Subsetting : Accessing Subarrays</h2>

<p>Just as we can use square brackets to access individual array elements, we can also use them to access subarrays with the slice notation, marked by the colon (:) character. The NumPy slicing syntax follows that of the standard Python list; to access a slice of an array x, use :</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span><span class="p">[</span><span class="n">start</span><span class="p">:</span><span class="n">stop</span><span class="p">:</span><span class="n">step</span><span class="p">]</span>
</code></pre></div></div>
<p><strong>NOTE :</strong> Default value of <code class="language-plaintext highlighter-rouge">start</code> is <code class="language-plaintext highlighter-rouge">0</code>, <code class="language-plaintext highlighter-rouge">stop</code> is <code class="language-plaintext highlighter-rouge">size of object</code> and <code class="language-plaintext highlighter-rouge">step</code> is <code class="language-plaintext highlighter-rouge">1</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ndarray</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="nb">buffer</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]),</span><span class="n">dtype</span> <span class="o">=</span> <span class="nb">int</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x[:] = "</span><span class="p">,</span><span class="n">x</span><span class="p">[:])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x[:5] = "</span><span class="p">,</span><span class="n">x</span><span class="p">[:</span><span class="mi">5</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x[5:] = "</span><span class="p">,</span><span class="n">x</span><span class="p">[</span><span class="mi">5</span><span class="p">:])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x[1:5] = "</span><span class="p">,</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">5</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x[1:5:2] = "</span><span class="p">,</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">5</span><span class="p">:</span><span class="mi">2</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x[::-1] = "</span><span class="p">,</span><span class="n">x</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[0 1 2 3 4 5 6 7 8 9]
x[:] =  [0 1 2 3 4 5 6 7 8 9]
x[:5] =  [0 1 2 3 4]
x[5:] =  [5 6 7 8 9]
x[1:5] =  [1 2 3 4]
x[1:5:2] =  [1 3]
x[::-1] =  [9 8 7 6 5 4 3 2 1 0]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="c1"># seed for reproducibility
</span><span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]])</span>
<span class="k">print</span><span class="p">(</span><span class="n">x2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x2[:2, :3] = "</span><span class="p">);</span> <span class="k">print</span><span class="p">(</span><span class="n">x2</span><span class="p">[:</span><span class="mi">2</span><span class="p">,</span> <span class="p">:</span><span class="mi">3</span><span class="p">])</span>  <span class="c1"># first two rows, first three columns
</span><span class="k">print</span><span class="p">(</span><span class="s">"x2[:3, ::2] = "</span><span class="p">);</span> <span class="k">print</span><span class="p">(</span><span class="n">x2</span><span class="p">[:</span><span class="mi">3</span><span class="p">,</span> <span class="p">::</span><span class="mi">2</span><span class="p">])</span> <span class="c1"># all rows, every other column
</span><span class="k">print</span><span class="p">(</span><span class="s">"x2[::-1, ::-1] = "</span><span class="p">);</span> <span class="k">print</span><span class="p">(</span><span class="n">x2</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">::</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span> <span class="c1">#reversed 2D array
</span><span class="k">print</span><span class="p">(</span><span class="s">"x2[:, 0] = "</span><span class="p">,</span><span class="n">x2</span><span class="p">[:,</span> <span class="mi">0</span><span class="p">])</span>  <span class="c1"># first column of x2
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[1 2 3]
 [4 5 6]
 [7 8 9]]
x2[:2, :3] =
[[1 2 3]
 [4 5 6]]
x2[:3, ::2] =
[[1 3]
 [4 6]
 [7 9]]
x2[::-1, ::-1] =
[[9 8 7]
 [6 5 4]
 [3 2 1]]
x2[:, 0] =  [1 4 7]
</code></pre></div></div>

<h2 id="joining-two-arrays">Joining Two Arrays</h2>

<p>Joining of two arrays in NumPy, is primarily accomplished using the routine <code class="language-plaintext highlighter-rouge">np.concatenate</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">])</span>
<span class="n">z</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">concatenate</span><span class="p">([</span><span class="n">x</span><span class="p">,</span><span class="n">y</span><span class="p">])</span> <span class="c1"># Combines x and y to give one array.
# a = np.concatenate([x,y,z])
</span><span class="k">print</span><span class="p">(</span><span class="n">z</span><span class="p">)</span>
<span class="c1"># print(a)
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[1 2 3 4 5 6]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]])</span>
<span class="n">y2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]])</span>
<span class="n">z2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">concatenate</span><span class="p">([</span><span class="n">x2</span><span class="p">,</span><span class="n">y2</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">z2</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[1 2 3]
 [2 3 4]
 [3 4 5]
 [4 5 6]]
</code></pre></div></div>

<h1 id="arithmetic-operations-on-2d-arrays">Arithmetic Operations on 2D arrays</h1>

<table>
  <thead>
    <tr>
      <th>Operator</th>
      <th>Equivalent Function</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>+</td>
      <td>np.add</td>
    </tr>
    <tr>
      <td>-</td>
      <td>np.subtract</td>
    </tr>
    <tr>
      <td>*</td>
      <td>np.multiply</td>
    </tr>
  </tbody>
</table>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]])</span>
<span class="n">y2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]])</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x2 + y2 = "</span><span class="p">);</span> <span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">x2</span><span class="p">,</span><span class="n">y2</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x2 - y2 = "</span><span class="p">);</span> <span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">subtract</span><span class="p">(</span><span class="n">x2</span><span class="p">,</span><span class="n">y2</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x2 + y2 =
[[ 4  6  8]
 [ 6  8 10]]
x2 - y2 =
[[-2 -2 -2]
 [-2 -2 -2]]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">x2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">y2</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"x2 * y2 = "</span><span class="p">);</span> <span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">multiply</span><span class="p">(</span><span class="n">x2</span><span class="p">,</span><span class="n">y2</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[1 2 3]
 [2 3 4]]
[[3 4 5]
 [4 5 6]]
x2 * y2 =
[[ 3  8 15]
 [ 8 15 24]]
</code></pre></div></div>

<p><strong>NOTE :</strong> Here as you can see, matrix multiplication isn’t actually possible and we actually just get a matrix where <code class="language-plaintext highlighter-rouge">x2[i,j] * y2[1,j]</code> is the output.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]])</span>
<span class="n">y2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]])</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">x2</span><span class="p">,</span><span class="n">y2</span><span class="p">))</span>
<span class="c1"># This gives an error. Why?
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>---------------------------------------------------------------------------

ValueError                                Traceback (most recent call last)

&lt;ipython-input-28-389e99023c8e&gt; in &lt;module&gt;
      1 x2 = np.array([[1,2,3],[2,3,4]])
      2 y2 = np.array([[3,4,5],[4,5,6]])
----&gt; 3 print(np.matmul(x2,y2))
      4 # This gives an error. Why?


ValueError: shapes (2,3) and (2,3) not aligned: 3 (dim 1) != 2 (dim 0)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">]])</span>
<span class="n">y2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">],[</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">]])</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">matmul</span><span class="p">(</span><span class="n">x2</span><span class="p">,</span><span class="n">y2</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[26 32]
 [38 47]]
</code></pre></div></div>

<h2 id="covariance">Covariance</h2>

<p>Covariance indicates the level to which two variables vary together.</p>

<p>If we examine N-dimensional samples, <code class="language-plaintext highlighter-rouge">X = [x_1, x_2, ... x_N]^T</code>, then the covariance matrix element <code class="language-plaintext highlighter-rouge">C_{ij}</code> is the covariance of <code class="language-plaintext highlighter-rouge">x_i</code> and <code class="language-plaintext highlighter-rouge">x_j</code>. The element <code class="language-plaintext highlighter-rouge">C_{ii}</code> is the variance of <code class="language-plaintext highlighter-rouge">x_i</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">]])</span>
<span class="k">print</span><span class="p">(</span><span class="n">x2</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[0 1 2]
 [2 1 0]]
</code></pre></div></div>

<p>Note here how <code class="language-plaintext highlighter-rouge">x[0]</code> increases and <code class="language-plaintext highlighter-rouge">x[1]</code> decreases.</p>

<p>This is also shown by the covariance matrix :</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">cov</span><span class="p">(</span><span class="n">x2</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[ 1. -1.]
 [-1.  1.]]
</code></pre></div></div>

<p>Note that again, <code class="language-plaintext highlighter-rouge">C[0,1]</code> and <code class="language-plaintext highlighter-rouge">C[1,0]</code> which shows the correlation between <code class="language-plaintext highlighter-rouge">x[0]</code> and <code class="language-plaintext highlighter-rouge">x[1]</code>, is negative.</p>

<p>However <code class="language-plaintext highlighter-rouge">C[0,0]</code> and <code class="language-plaintext highlighter-rouge">C[1,1]</code> which show the correlation between <code class="language-plaintext highlighter-rouge">x[0]</code> and <code class="language-plaintext highlighter-rouge">x[0]</code> and <code class="language-plaintext highlighter-rouge">x[1]</code> and <code class="language-plaintext highlighter-rouge">x[1]</code> is 1.</p>

<p>Note how x and y are combined:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mf">2.1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="mf">4.3</span><span class="p">])</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span>  <span class="mf">1.1</span><span class="p">,</span>  <span class="mf">0.12</span><span class="p">])</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">stack</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">cov</span><span class="p">(</span><span class="n">X</span><span class="p">))</span>
<span class="c1"># To check
</span><span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">cov</span><span class="p">(</span><span class="n">x</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">cov</span><span class="p">(</span><span class="n">y</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[11.71       -4.286     ]
 [-4.286       2.14413333]]
11.709999999999999
2.1441333333333334
</code></pre></div></div>

<h1 id="correlation">Correlation</h1>

<p>The term “correlation” refers to a mutual relationship or association between quantities.
It is a standardised form of Covariance.</p>

<p>Correlation Coeffecients take values between <code class="language-plaintext highlighter-rouge">[-1,1]</code></p>

<p>In Numpy (and in general), Correlation Matrix refers to the normalised version of a Covariance matrix.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="o">-</span><span class="mf">2.1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span>  <span class="mf">4.3</span><span class="p">])</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">3</span><span class="p">,</span>  <span class="mf">1.1</span><span class="p">,</span>  <span class="mf">0.12</span><span class="p">])</span>
<span class="n">X</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">stack</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">corrcoef</span><span class="p">(</span><span class="n">X</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[[ 1.         -0.85535781]
 [-0.85535781  1.        ]]
</code></pre></div></div>

<hr />

<!-- Place this tag where you want the button to render. -->
<p><a class="github-button" href="https://github.com/RohitMidha23" data-size="large" data-show-count="true" aria-label="Follow @RohitMidha23 on GitHub">Follow @RohitMidha23</a>
<!-- Place this tag in your head or just before your close body tag. -->
<script async="" defer="" src="https://buttons.github.io/buttons.js"></script></p>

<p>Find more at my Github repository <a href="http://bit.ly/ExplainedRepo">Explained</a>.</p>

<p>Show some :heart: by :star:ing it.</p>

<!-- Place this tag where you want the button to render. -->
<p><a class="github-button" href="https://github.com/RohitMidha23/Explained" data-size="large" data-show-count="true" aria-label="Star RohitMidha23/Explained on GitHub">Star</a>
<a href="https://github.com/RohitMidha23/Explained" class="github-corner" aria-label="View source on GitHub"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#fff; color:#151513; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style></p>]]></content><author><name>Rohit Midha</name></author><category term="blog" /><category term="numpy" /><category term="tutorial" /><category term="Explained" /><summary type="html"><![CDATA[This is the second tutorial of the Explained! series.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/NumpyExplained/numpy.jpeg" /><media:content medium="image" url="http://localhost:4000/assets/images/NumpyExplained/numpy.jpeg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Binarify</title><link href="http://localhost:4000/Binarify/" rel="alternate" type="text/html" title="Binarify" /><published>2019-01-19T00:00:00+00:00</published><updated>2019-01-19T00:00:00+00:00</updated><id>http://localhost:4000/Binarify</id><content type="html" xml:base="http://localhost:4000/Binarify/"><![CDATA[<p>No, I’m not making the <em>“there are 10 kinds of people in this world”</em> joke.</p>

<p>Binarify is a python package that lets you convert any image to binary.</p>

<p>Let’s take a picture of the spidercat.
<img src="/assets/images/Binarify/input.png" alt="png" /></p>

<p>Let’s <em> Binarify </em> it.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000110000000000000000000000000000000000000
000000000000000000000000000000000000010000000000000000000000000000000000000
000000000000000000000000000000000000010000000000000000000000000000000000000
000000000000000000000000000000000000010000000000000000000000000000000000000
000000000000000000000000000000000000010000000000000000000000000000000000000
000000000000000000000000000000000000010000000000000000000000000000000000000
000000000000000000000000000000000000010000000000000000000000000000000000000
000000000000000000000000000000000000010000000000000000000000000000000000000
000000000000000000000000000000000000010000000000000000000000000000000000000
000000000000000000000000000000000000010000000000000000000000000000000000000
000000000000000000000000000000000000110000000000000000000000000000000000000
000000000000000000000000000000000000010100000000000000000000000000000000000
000000000000000000000000011000000000010000000000000000000000000000000000000
000000000000000000000000100110000000010000000000000000000000000000000000000
000000000000000000000000010001000000010000000000000000000000000000000000000
000000000000000000000000010000110000011000000000000000000000000000000000000
000000000000000000000000001000101100011000000000000000000000000000000000000
000000000000000000000000011100011100111011111110000000000000000000000000000
000000000000000000000000000011000000011100000010110000000000000000000000000
000000000000000000000000000001111111110000000000110000000000000000000000000
000000000000000000000000000000000000010110000000001100000000000000000000000
000000000000000000000000000000000000110010000000001000000000000000000000000
000000000000000000000000000000000011001011000011111000000000000000000000000
000000000000000000000000000000001110001101100011010000000000000000000000000
000000000000000000000000000000011110001111000000100000000000000000000000000
000000000000000000000000000000110110000011101000011000000000000000000000000
000000000000000000000000000001110100000001110100000000000000000000000000000
000000000000000000000000000001001100000001101110000000000000000000000000000
000000000000000000000000000001101100000001101110000000000000000000000000000
000000000000000000000000000001101100000000100110000000000000000000000000000
000000000000000000000000000001111100000001101010000000000000000000000000000
000000000000000000000000000000100110000001001011111000000000000000000000000
000000000000000000000000000000111111000011001011111100000000000000000000000
000000000000000000000000000000000011010100100111111100000000000000000000000
000000000000000000000000000000011100010000001000011110000000000000000000000
000000000000000000000000000000000000011000000000001110000000000000000000000
000000000000000000000000000000000000000000000000000111000000000000000000000
000000000000000000000000000001111100010001101000000011100000000000000000000
000000000000000000000000000011100110111011110111000000110000000000000000000
000000000000000000000000011100110111111011011101110000010000000000000000000
000000000000000000000000111011110111111011011010111000000000000000000000000
000000000000000000000000010111111000101000111011000100000000000000000000000
000000000000000001111101101111000011011110000111101111111100000000000000000
000000000000000000000011100111001111011111100110101110000000000000000000000
000000000000001100000011101100110100000001011001101110000001100000000000000
000000000010000000000011111111101111110110011111110111000000000010000000000
000000000000000000000010011110111110111010011111110011000000000000000000000
000000000000000000000011011101111110000110111111110111000000000000000000000
000000000000000000000011010011111111011011111111110111000000000000000000000
000000000000000000000011011111111111110111111111110111000000000000000000000
000000000000000000000011111111111111011101111111110000000000000000000000000
000000000000000000000011111111111100101001111111111111000000000000000000000
000000000000000000000011111111110110000011011111111111000000000000000000000
000000000000000000000011011110011101101101110101111110000000000000000000000
000000000000000000000001010010111000101100110110011110000000000000000000000
000000000000000000000000001111111110100011110111100000000000000000000000000
000000000000000000000000110111001101101111110111011000000000000000000000000
000000000000000000000000111010110111101101011010111100000000000000000000000
000000000000000000000000110000111000100000111110011100000000000000000000000
000000000000000000000000101111101111101110111011101100000000000000000000000
000000000000000000000000011111100111101111011111110100000000000000000000000
000000000000000000000000111111100000000000000111111100000000000000000000000
000000000000000000000000011110000000000000000001111000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000001111101100000000000000000000000000000000
000000000000000000000001111111111111111111111111111100000000000000000000000
000000000000000000000011111111111111111111111111111110000000000000000000000
000000000000000000000000000111111111111111111111000000000000000000000000000
</code></pre></div></div>

<h2 id="what-is-binarify">What is Binarify</h2>
<p>Binarify is a python script that lets you convert any image to a binary image resembling the input image.</p>

<p>In other words, it replicates an image with 1’s and 0’s.</p>

<h2 id="setup">Setup</h2>
<p>Make sure you have the following packages installed before usage:</p>
<ul>
  <li>Pillows &gt;= 3.4.0</li>
  <li>urllib</li>
  <li>argparse</li>
</ul>

<h2 id="use-binarify">Use Binarify</h2>

<ol>
  <li>Clone <a href="https://github.com/RohitMidha23/Binarify">this repo</a>.</li>
  <li>Typical usage often looks like :
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  python binarify.py -input path/to/image.jpg -output path/to/output/text/file -mode black -width 120
</code></pre></div>    </div>
  </li>
  <li>Check the output.txt file for the text version of the same.</li>
</ol>

<h2 id="support-me">Support Me</h2>

<p>If you :heart: it, :star: <a href="https://github.com/RohitMidha23/Binarify">this repository</a>.</p>

<p>Help me translate this README into other languages. :smile:</p>

<p>Check out my other work too either on <a href="http://bit.ly/2VMv9ZP">Github</a> or on <a href="https://rohitmidha23.github.io">my website</a>.</p>

<p>Enjoy!</p>

<hr />
<!-- Place this tag where you want the button to render. -->
<p><a class="github-button" href="https://github.com/RohitMidha23" data-size="large" data-show-count="true" aria-label="Follow @RohitMidha23 on GitHub">Follow @RohitMidha23</a></p>

<!-- Place this tag where you want the button to render. -->
<p><a class="github-button" href="https://github.com/RohitMidha23/Binarify" data-size="large" data-show-count="true" aria-label="Star RohitMidha23/Binarify on GitHub">Star</a></p>

<!-- Place this tag in your head or just before your close body tag. -->
<script async="" defer="" src="https://buttons.github.io/buttons.js"></script>

<p><a href="https://github.com/RohitMidha23/Binarify/" class="github-corner" aria-label="View source on GitHub"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#fff; color:#151513; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style></p>]]></content><author><name>Rohit Midha</name></author><category term="project" /><summary type="html"><![CDATA[No, I’m not making the “there are 10 kinds of people in this world” joke.]]></summary></entry><entry><title type="html">Introduction to Pandas</title><link href="http://localhost:4000/Introduction-to-Pandas/" rel="alternate" type="text/html" title="Introduction to Pandas" /><published>2019-01-11T11:20:00+00:00</published><updated>2019-01-11T11:20:00+00:00</updated><id>http://localhost:4000/Introduction-to-Pandas</id><content type="html" xml:base="http://localhost:4000/Introduction-to-Pandas/"><![CDATA[<p>This is the first tutorial of the Explained! series.</p>

<p>I will be cataloging all the work I do with regards to PyLibraries and will share it here or on <a href="http://bit.ly/RohitMidha23GitHub">my Github</a>.</p>

<p>I will also be updating this post as and when I work on Pandas.</p>

<p>That being said, Dive in!</p>

<h2 id="series">Series</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">random</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">first_series</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span> <span class="p">,</span><span class="s">"hello"</span><span class="p">])</span>
<span class="n">first_series</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0        1
1        2
2        3
3      NaN
4    hello
dtype: object
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">series</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span> <span class="p">,</span><span class="s">"hello"</span><span class="p">],</span> <span class="n">index</span> <span class="o">=</span> <span class="p">[</span><span class="s">'A'</span><span class="p">,</span><span class="s">'B'</span><span class="p">,</span><span class="s">'C'</span><span class="p">,</span><span class="s">'Unknown'</span><span class="p">,</span><span class="s">'String'</span><span class="p">])</span>
<span class="n">series</span>
<span class="c1">#indexing the Series with custom values
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A              1
B              2
C              3
Unknown      NaN
String     hello
dtype: object
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">dict</span> <span class="o">=</span> <span class="p">{</span><span class="s">"Python"</span><span class="p">:</span> <span class="s">"Fun"</span><span class="p">,</span> <span class="s">"C++"</span><span class="p">:</span> <span class="s">"Outdated"</span><span class="p">,</span><span class="s">"Coding"</span><span class="p">:</span><span class="s">"Hmm.."</span><span class="p">}</span>
<span class="n">series</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">(</span><span class="nb">dict</span><span class="p">)</span>
<span class="n">series</span>
<span class="c1"># Dict to pandas Series
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Python         Fun
C++       Outdated
Coding       Hmm..
dtype: object
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">series</span><span class="p">[[</span><span class="s">'Coding'</span><span class="p">,</span><span class="s">'Python'</span><span class="p">]]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Coding    Hmm..
Python      Fun
dtype: object
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">series</span><span class="p">.</span><span class="n">index</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Index(['Python', 'C++', 'Coding'], dtype='object')
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">series</span><span class="p">.</span><span class="n">values</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array(['Fun', 'Outdated', 'Hmm..'], dtype=object)
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">series</span><span class="p">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>count            3
unique           3
top       Outdated
freq             1
dtype: object
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#Series is a mutable data structures and you can easily change any item’s value:
</span><span class="n">series</span><span class="p">[</span><span class="s">'Coding'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'Awesome'</span>
<span class="n">series</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Python         Fun
C++       Outdated
Coding     Awesome
dtype: object
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># add new values:
</span><span class="n">series</span><span class="p">[</span><span class="s">'Java'</span><span class="p">]</span> <span class="o">=</span> <span class="s">'Okay'</span>
<span class="n">series</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Python         Fun
C++       Outdated
Coding     Awesome
Java          Okay
dtype: object
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># If it is necessary to apply any mathematical operation to Series items, you may done it like below:
</span><span class="n">num_series</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">Series</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="bp">None</span><span class="p">])</span>
<span class="n">num_series_changed</span> <span class="o">=</span> <span class="n">num_series</span><span class="o">/</span><span class="mi">2</span>
<span class="n">num_series_changed</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0    0.5
1    1.0
2    1.5
3    2.0
4    2.5
5    3.0
6    NaN
dtype: float64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># NULL/NaN checking can be performed with isnull() and notnull().
</span><span class="k">print</span><span class="p">(</span><span class="n">series</span><span class="p">.</span><span class="n">isnull</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">num_series</span><span class="p">.</span><span class="n">notnull</span><span class="p">())</span>
<span class="k">print</span><span class="p">(</span><span class="n">num_series_changed</span><span class="p">.</span><span class="n">notnull</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Python    False
C++       False
Coding    False
Java      False
dtype: bool
0     True
1     True
2     True
3     True
4     True
5     True
6    False
dtype: bool
0     True
1     True
2     True
3     True
4     True
5     True
6    False
dtype: bool
</code></pre></div></div>

<hr />
<h2 id="dataframes">DataFrames</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s">'year'</span><span class="p">:</span> <span class="p">[</span><span class="mi">1990</span><span class="p">,</span> <span class="mi">1994</span><span class="p">,</span> <span class="mi">1998</span><span class="p">,</span> <span class="mi">2002</span><span class="p">,</span> <span class="mi">2006</span><span class="p">,</span> <span class="mi">2010</span><span class="p">,</span> <span class="mi">2014</span><span class="p">],</span>
        <span class="s">'winner'</span><span class="p">:</span> <span class="p">[</span><span class="s">'Germany'</span><span class="p">,</span> <span class="s">'Brazil'</span><span class="p">,</span> <span class="s">'France'</span><span class="p">,</span> <span class="s">'Brazil'</span><span class="p">,</span><span class="s">'Italy'</span><span class="p">,</span> <span class="s">'Spain'</span><span class="p">,</span> <span class="s">'Germany'</span><span class="p">],</span>
        <span class="s">'runner-up'</span><span class="p">:</span> <span class="p">[</span><span class="s">'Argentina'</span><span class="p">,</span> <span class="s">'Italy'</span><span class="p">,</span> <span class="s">'Brazil'</span><span class="p">,</span><span class="s">'Germany'</span><span class="p">,</span> <span class="s">'France'</span><span class="p">,</span> <span class="s">'Netherlands'</span><span class="p">,</span> <span class="s">'Argentina'</span><span class="p">],</span>
        <span class="s">'final score'</span><span class="p">:</span> <span class="p">[</span><span class="s">'1-0'</span><span class="p">,</span> <span class="s">'0-0 (pen)'</span><span class="p">,</span> <span class="s">'3-0'</span><span class="p">,</span> <span class="s">'2-0'</span><span class="p">,</span> <span class="s">'1-1 (pen)'</span><span class="p">,</span> <span class="s">'1-0'</span><span class="p">,</span> <span class="s">'1-0'</span><span class="p">]</span> <span class="p">}</span>
<span class="n">world_cup</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">'year'</span><span class="p">,</span> <span class="s">'winner'</span><span class="p">,</span> <span class="s">'runner-up'</span><span class="p">,</span> <span class="s">'final score'</span><span class="p">])</span>
<span class="n">world_cup</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>year</th>
      <th>winner</th>
      <th>runner-up</th>
      <th>final score</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1990</td>
      <td>Germany</td>
      <td>Argentina</td>
      <td>1-0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1994</td>
      <td>Brazil</td>
      <td>Italy</td>
      <td>0-0 (pen)</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1998</td>
      <td>France</td>
      <td>Brazil</td>
      <td>3-0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2002</td>
      <td>Brazil</td>
      <td>Germany</td>
      <td>2-0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>2006</td>
      <td>Italy</td>
      <td>France</td>
      <td>1-1 (pen)</td>
    </tr>
    <tr>
      <th>5</th>
      <td>2010</td>
      <td>Spain</td>
      <td>Netherlands</td>
      <td>1-0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>2014</td>
      <td>Germany</td>
      <td>Argentina</td>
      <td>1-0</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Another way to set a DataFrame is the using of Python list of dictionaries:
</span>
<span class="n">data_2</span> <span class="o">=</span> <span class="p">[{</span><span class="s">'year'</span><span class="p">:</span> <span class="mi">1990</span><span class="p">,</span> <span class="s">'winner'</span><span class="p">:</span> <span class="s">'Germany'</span><span class="p">,</span> <span class="s">'runner-up'</span><span class="p">:</span> <span class="s">'Argentina'</span><span class="p">,</span> <span class="s">'final score'</span><span class="p">:</span> <span class="s">'1-0'</span><span class="p">},</span>
          <span class="p">{</span><span class="s">'year'</span><span class="p">:</span> <span class="mi">1994</span><span class="p">,</span> <span class="s">'winner'</span><span class="p">:</span> <span class="s">'Brazil'</span><span class="p">,</span> <span class="s">'runner-up'</span><span class="p">:</span> <span class="s">'Italy'</span><span class="p">,</span> <span class="s">'final score'</span><span class="p">:</span> <span class="s">'0-0 (pen)'</span><span class="p">},</span>
          <span class="p">{</span><span class="s">'year'</span><span class="p">:</span> <span class="mi">1998</span><span class="p">,</span> <span class="s">'winner'</span><span class="p">:</span> <span class="s">'France'</span><span class="p">,</span> <span class="s">'runner-up'</span><span class="p">:</span> <span class="s">'Brazil'</span><span class="p">,</span> <span class="s">'final score'</span><span class="p">:</span> <span class="s">'3-0'</span><span class="p">},</span>
          <span class="p">{</span><span class="s">'year'</span><span class="p">:</span> <span class="mi">2002</span><span class="p">,</span> <span class="s">'winner'</span><span class="p">:</span> <span class="s">'Brazil'</span><span class="p">,</span> <span class="s">'runner-up'</span><span class="p">:</span> <span class="s">'Germany'</span><span class="p">,</span> <span class="s">'final score'</span><span class="p">:</span> <span class="s">'2-0'</span><span class="p">},</span>
          <span class="p">{</span><span class="s">'year'</span><span class="p">:</span> <span class="mi">2006</span><span class="p">,</span> <span class="s">'winner'</span><span class="p">:</span> <span class="s">'Italy'</span><span class="p">,</span><span class="s">'runner-up'</span><span class="p">:</span> <span class="s">'France'</span><span class="p">,</span> <span class="s">'final score'</span><span class="p">:</span> <span class="s">'1-1 (pen)'</span><span class="p">},</span>
          <span class="p">{</span><span class="s">'year'</span><span class="p">:</span> <span class="mi">2010</span><span class="p">,</span> <span class="s">'winner'</span><span class="p">:</span> <span class="s">'Spain'</span><span class="p">,</span> <span class="s">'runner-up'</span><span class="p">:</span> <span class="s">'Netherlands'</span><span class="p">,</span> <span class="s">'final score'</span><span class="p">:</span> <span class="s">'1-0'</span><span class="p">},</span>
          <span class="p">{</span><span class="s">'year'</span><span class="p">:</span> <span class="mi">2014</span><span class="p">,</span> <span class="s">'winner'</span><span class="p">:</span> <span class="s">'Germany'</span><span class="p">,</span> <span class="s">'runner-up'</span><span class="p">:</span> <span class="s">'Argentina'</span><span class="p">,</span> <span class="s">'final score'</span><span class="p">:</span> <span class="s">'1-0'</span><span class="p">}</span>
         <span class="p">]</span>
<span class="n">world_cup</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data_2</span><span class="p">)</span>
<span class="n">world_cup</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>final score</th>
      <th>runner-up</th>
      <th>winner</th>
      <th>year</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>1-0</td>
      <td>Argentina</td>
      <td>Germany</td>
      <td>1990</td>
    </tr>
    <tr>
      <th>1</th>
      <td>0-0 (pen)</td>
      <td>Italy</td>
      <td>Brazil</td>
      <td>1994</td>
    </tr>
    <tr>
      <th>2</th>
      <td>3-0</td>
      <td>Brazil</td>
      <td>France</td>
      <td>1998</td>
    </tr>
    <tr>
      <th>3</th>
      <td>2-0</td>
      <td>Germany</td>
      <td>Brazil</td>
      <td>2002</td>
    </tr>
    <tr>
      <th>4</th>
      <td>1-1 (pen)</td>
      <td>France</td>
      <td>Italy</td>
      <td>2006</td>
    </tr>
    <tr>
      <th>5</th>
      <td>1-0</td>
      <td>Netherlands</td>
      <td>Spain</td>
      <td>2010</td>
    </tr>
    <tr>
      <th>6</th>
      <td>1-0</td>
      <td>Argentina</td>
      <td>Germany</td>
      <td>2014</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"First 2 Rows: "</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span> <span class="p">(</span><span class="n">world_cup</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span><span class="n">end</span><span class="o">=</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span> <span class="p">(</span><span class="s">"Last 2 Rows : "</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span> <span class="p">(</span><span class="n">world_cup</span><span class="p">.</span><span class="n">tail</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span><span class="n">end</span><span class="o">=</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="s">"Using slicing : "</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">)</span>
<span class="k">print</span> <span class="p">(</span><span class="n">world_cup</span><span class="p">[</span><span class="mi">2</span><span class="p">:</span><span class="mi">4</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>First 2 Rows:

  final score  runner-up   winner  year
0         1-0  Argentina  Germany  1990
1   0-0 (pen)      Italy   Brazil  1994

Last 2 Rows :

  final score    runner-up   winner  year
5         1-0  Netherlands    Spain  2010
6         1-0    Argentina  Germany  2014

Using slicing :

  final score runner-up  winner  year
2         3-0    Brazil  France  1998
3         2-0   Germany  Brazil  2002
</code></pre></div></div>

<hr />
<h3 id="csv">CSV</h3>
<h4 id="reading">Reading:</h4>

<p><code class="language-plaintext highlighter-rouge">df = pd.read_csv("path\to\the\csv\file\for\reading")</code></p>
<h4 id="writing">Writing:</h4>

<p><code class="language-plaintext highlighter-rouge">df.to_csv("path\to\the\folder\where\you\want\save\csv\file")</code></p>

<h3 id="txt-files">TXT file(s)</h3>
<p>(txt file can be read as a CSV file with other separator (delimiter); we suppose below that columns are separated by tabulation):</p>

<h4 id="reading-1">Reading:</h4>

<p><code class="language-plaintext highlighter-rouge">df = pd.read_csv("path\to\the\txt\file\for\reading", sep='\t')</code></p>
<h4 id="writing-1">Writing:</h4>

<p><code class="language-plaintext highlighter-rouge">df.to_csv("path\to\the\folder\where\you\want\save\txt\file", sep='\t')</code></p>
<h3 id="json-files">JSON files</h3>
<p>(an open-standard format that uses human-readable text to transmit data objects consisting of attribute–value pairs. It is the most common data format used for asynchronous browser/server communication. By its view it is very similar to Python dictionary)</p>

<h4 id="reading-2">Reading:</h4>

<p><code class="language-plaintext highlighter-rouge">df = pd.read_json("path\to\the\json\file\for\reading", sep='\t')</code></p>
<h4 id="writing-2">Writing:</h4>

<p><code class="language-plaintext highlighter-rouge">df.to_json("path\to\the\folder\where\you\want\save\json\file", sep='\t')</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># To write world_cup Dataframe to a CSV File
</span><span class="n">world_cup</span><span class="p">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s">"worldcup.csv"</span><span class="p">)</span>
<span class="c1"># To save CSV file without index use index=False attribute
</span>
<span class="k">print</span><span class="p">(</span><span class="s">"File Written!"</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="s">"</span><span class="se">\n\n</span><span class="s">"</span><span class="p">)</span>

<span class="c1">#To check if it was written
</span><span class="kn">import</span> <span class="nn">os</span>
<span class="k">print</span><span class="p">(</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">exists</span><span class="p">(</span><span class="s">'worldcup.csv'</span><span class="p">))</span>

<span class="c1"># reading from it in a new dataframe df
</span><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'worldcup.csv'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">head</span><span class="p">())</span>


</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>File Written!

True
   Unnamed: 0 final score  runner-up   winner  year
0           0         1-0  Argentina  Germany  1990
1           1   0-0 (pen)      Italy   Brazil  1994
2           2         3-0     Brazil   France  1998
3           3         2-0    Germany   Brazil  2002
4           4   1-1 (pen)     France    Italy  2006
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># We can also load the data without index as :
</span><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'worldcup.csv'</span><span class="p">,</span><span class="n">index_col</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  final score    runner-up   winner  year
0         1-0    Argentina  Germany  1990
1   0-0 (pen)        Italy   Brazil  1994
2         3-0       Brazil   France  1998
3         2-0      Germany   Brazil  2002
4   1-1 (pen)       France    Italy  2006
5         1-0  Netherlands    Spain  2010
6         1-0    Argentina  Germany  2014
</code></pre></div></div>

<hr />
<p>You can find the dataset used in the following code <a href="http://bit.ly/MoviesDatasetExplained">here</a>.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movies</span><span class="o">=</span><span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"data/movies.csv"</span><span class="p">,</span><span class="n">encoding</span> <span class="o">=</span> <span class="s">"ISO-8859-1"</span><span class="p">)</span>
<span class="c1"># encoding is added only for this specific dataset because it gave error with utf-8
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movies</span><span class="p">[</span><span class="s">'release_date'</span><span class="p">]</span> <span class="o">=</span> <span class="n">movies</span><span class="p">[</span><span class="s">'release_date'</span><span class="p">].</span><span class="nb">map</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">to_datetime</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">movies</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">20</span><span class="p">))</span>

<span class="c1">#print(movies.describe())
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    user_id  movie_id  rating  timestamp   age gender     occupation zip_code  \
0       196       242       3  881250949  49.0      M         writer    55105   
1       305       242       5  886307828  23.0      M     programmer    94086   
2         6       242       4  883268170  42.0      M      executive    98101   
3       234       242       4  891033261  60.0      M        retired    94702   
4        63       242       3  875747190  31.0      M      marketing    75240   
5       181       242       1  878961814  26.0      M      executive    21218   
6       201       242       4  884110598  27.0      M         writer    E2A4H   
7       249       242       5  879571438  25.0      M        student    84103   
8        13       242       2  881515193  47.0      M       educator    29206   
9       279       242       3  877756647  33.0      M     programmer    85251   
10      145       242       5  875269755  31.0      M  entertainment    V3N4P   
11       90       242       4  891382267  60.0      M       educator    78155   
12      271       242       4  885844495  51.0      M       engineer    22932   
13       18       242       5  880129305  35.0      F          other    37212   
14        1       242       5  889751633   NaN      M            NaN    85711   
15      207       242       4  890793823  39.0      M      marketing    92037   
16       14       242       4  876964570  45.0      M      scientist    55106   
17      113       242       2  875075887  47.0      M      executive    95032   
18      123       242       5  879809053   NaN      F         artist    20008   
19      296       242       4  884196057  43.0      F  administrator    16803   

     movie_title release_date   ...    Fantasy  Film-Noir  Horror  Musical  \
0   Kolya (1996)   1997-01-24   ...          0          0       0        0   
1   Kolya (1996)   1997-01-24   ...          0          0       0        0   
2   Kolya (1996)   1997-01-24   ...          0          0       0        0   
3   Kolya (1996)   1997-01-24   ...          0          0       0        0   
4   Kolya (1996)   1997-01-24   ...          0          0       0        0   
5   Kolya (1996)   1997-01-24   ...          0          0       0        0   
6   Kolya (1996)   1997-01-24   ...          0          0       0        0   
7   Kolya (1996)   1997-01-24   ...          0          0       0        0   
8   Kolya (1996)   1997-01-24   ...          0          0       0        0   
9   Kolya (1996)   1997-01-24   ...          0          0       0        0   
10  Kolya (1996)   1997-01-24   ...          0          0       0        0   
11  Kolya (1996)   1997-01-24   ...          0          0       0        0   
12  Kolya (1996)   1997-01-24   ...          0          0       0        0   
13  Kolya (1996)   1997-01-24   ...          0          0       0        0   
14  Kolya (1996)   1997-01-24   ...          0          0       0        0   
15  Kolya (1996)   1997-01-24   ...          0          0       0        0   
16  Kolya (1996)   1997-01-24   ...          0          0       0        0   
17  Kolya (1996)   1997-01-24   ...          0          0       0        0   
18  Kolya (1996)   1997-01-24   ...          0          0       0        0   
19  Kolya (1996)   1997-01-24   ...          0          0       0        0   

    Mystery  Romance  Sci-Fi  Thriller  War  Western  
0         0        0       0         0    0        0  
1         0        0       0         0    0        0  
2         0        0       0         0    0        0  
3         0        0       0         0    0        0  
4         0        0       0         0    0        0  
5         0        0       0         0    0        0  
6         0        0       0         0    0        0  
7         0        0       0         0    0        0  
8         0        0       0         0    0        0  
9         0        0       0         0    0        0  
10        0        0       0         0    0        0  
11        0        0       0         0    0        0  
12        0        0       0         0    0        0  
13        0        0       0         0    0        0  
14        0        0       0         0    0        0  
15        0        0       0         0    0        0  
16        0        0       0         0    0        0  
17        0        0       0         0    0        0  
18        0        0       0         0    0        0  
19        0        0       0         0    0        0  

[20 rows x 30 columns]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movies_rating</span> <span class="o">=</span> <span class="n">movies</span><span class="p">[</span><span class="s">'rating'</span><span class="p">]</span>
<span class="c1"># Here we are showing only one column, i.e. a Series
</span><span class="k">print</span> <span class="p">(</span><span class="s">'type:'</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">movies_rating</span><span class="p">))</span>
<span class="n">movies_rating</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>type: &lt;class 'pandas.core.series.Series'&gt;





0    3
1    5
2    4
3    4
4    3
Name: rating, dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Filtering data
# Let's display only women
</span><span class="n">movies_user_female</span> <span class="o">=</span> <span class="n">movies</span><span class="p">[</span><span class="n">movies</span><span class="p">[</span><span class="s">'gender'</span><span class="p">]</span><span class="o">==</span><span class="s">'F'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">movies_user_female</span><span class="p">.</span><span class="n">head</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    user_id  movie_id  rating  timestamp   age gender     occupation zip_code  \
13       18       242       5  880129305  35.0      F          other    37212   
18      123       242       5  879809053   NaN      F         artist    20008   
19      296       242       4  884196057  43.0      F  administrator    16803   
21      270       242       5  876953744  18.0      F        student    63119   
22      240       242       5  885775683  23.0      F       educator    20784   

     movie_title release_date   ...    Fantasy  Film-Noir  Horror  Musical  \
13  Kolya (1996)   1997-01-24   ...          0          0       0        0   
18  Kolya (1996)   1997-01-24   ...          0          0       0        0   
19  Kolya (1996)   1997-01-24   ...          0          0       0        0   
21  Kolya (1996)   1997-01-24   ...          0          0       0        0   
22  Kolya (1996)   1997-01-24   ...          0          0       0        0   

    Mystery  Romance  Sci-Fi  Thriller  War  Western  
13        0        0       0         0    0        0  
18        0        0       0         0    0        0  
19        0        0       0         0    0        0  
21        0        0       0         0    0        0  
22        0        0       0         0    0        0  

[5 rows x 30 columns]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#to see all the different values possible for a given column
</span><span class="n">occupation_list</span> <span class="o">=</span> <span class="n">movies</span><span class="p">[</span><span class="s">'occupation'</span><span class="p">]</span>
<span class="k">print</span><span class="p">(</span><span class="n">occupation_list</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0               writer
1           programmer
2            executive
3              retired
4            marketing
5            executive
6               writer
7              student
8             educator
9           programmer
10       entertainment
11            educator
12            engineer
13               other
14                 NaN
15           marketing
16           scientist
17           executive
18              artist
19       administrator
20             student
21             student
22            educator
23                 NaN
24              writer
25                 NaN
26                 NaN
27           marketing
28       administrator
29             student
             ...      
99970         educator
99971            other
99972            other
99973            other
99974    administrator
99975           artist
99976           artist
99977           artist
99978           artist
99979           artist
99980           artist
99981    entertainment
99982          student
99983          student
99984           artist
99985           artist
99986           artist
99987          student
99988        librarian
99989           writer
99990              NaN
99991           artist
99992            other
99993            other
99994          student
99995          student
99996          student
99997          student
99998           writer
99999         engineer
Name: occupation, Length: 100000, dtype: object
</code></pre></div></div>

<hr />
<h3 id="work-with-indexes-and-multiindex-option">Work with indexes and MultiIndex option</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">random</span>
<span class="n">indexes</span> <span class="o">=</span> <span class="p">[</span><span class="n">random</span><span class="p">.</span><span class="n">randrange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">[{</span><span class="n">i</span><span class="p">:</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="s">'ABCDE'</span><span class="p">}</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">5</span><span class="p">)]</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">data</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">5</span><span class="p">])</span>
<span class="n">df</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
      <th>E</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>5</td>
      <td>8</td>
      <td>6</td>
      <td>4</td>
      <td>2</td>
    </tr>
    <tr>
      <th>2</th>
      <td>1</td>
      <td>3</td>
      <td>9</td>
      <td>8</td>
      <td>2</td>
    </tr>
    <tr>
      <th>3</th>
      <td>8</td>
      <td>7</td>
      <td>2</td>
      <td>1</td>
      <td>2</td>
    </tr>
    <tr>
      <th>4</th>
      <td>3</td>
      <td>8</td>
      <td>1</td>
      <td>3</td>
      <td>8</td>
    </tr>
    <tr>
      <th>5</th>
      <td>0</td>
      <td>7</td>
      <td>4</td>
      <td>4</td>
      <td>2</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movies_user_gender_male</span> <span class="o">=</span> <span class="n">movies</span><span class="p">[</span><span class="n">movies</span><span class="p">[</span><span class="s">'gender'</span><span class="p">]</span><span class="o">==</span><span class="s">'M'</span><span class="p">]</span>
<span class="n">movies_user_gender_male_dup</span> <span class="o">=</span> <span class="n">movies_user_gender_male</span><span class="p">.</span><span class="n">drop_duplicates</span><span class="p">(</span><span class="n">keep</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">movies_user_gender_male</span><span class="p">.</span><span class="n">head</span><span class="p">())</span>
<span class="c1"># From this we can clearly see age has missing value and that from 100,000 the data reduced to 74260,
# due to filtering and removing duplicates
</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   user_id  movie_id  rating  timestamp   age gender  occupation zip_code  \
0      196       242       3  881250949  49.0      M      writer    55105   
1      305       242       5  886307828  23.0      M  programmer    94086   
2        6       242       4  883268170  42.0      M   executive    98101   
3      234       242       4  891033261  60.0      M     retired    94702   
4       63       242       3  875747190  31.0      M   marketing    75240   

    movie_title release_date   ...    Fantasy  Film-Noir  Horror  Musical  \
0  Kolya (1996)   1997-01-24   ...          0          0       0        0   
1  Kolya (1996)   1997-01-24   ...          0          0       0        0   
2  Kolya (1996)   1997-01-24   ...          0          0       0        0   
3  Kolya (1996)   1997-01-24   ...          0          0       0        0   
4  Kolya (1996)   1997-01-24   ...          0          0       0        0   

   Mystery  Romance  Sci-Fi  Thriller  War  Western  
0        0        0       0         0    0        0  
1        0        0       0         0    0        0  
2        0        0       0         0    0        0  
3        0        0       0         0    0        0  
4        0        0       0         0    0        0  

[5 rows x 30 columns]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#gender = female and age between 30 and 40
</span><span class="n">gender_required</span> <span class="o">=</span> <span class="p">[</span><span class="s">'F'</span><span class="p">]</span>
<span class="n">filtered_df</span> <span class="o">=</span> <span class="n">movies</span><span class="p">[((</span><span class="n">movies</span><span class="p">[</span><span class="s">'gender'</span><span class="p">]</span> <span class="o">==</span> <span class="s">'F'</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">movies</span><span class="p">[</span><span class="s">'age'</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">30</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">movies</span><span class="p">[</span><span class="s">'age'</span><span class="p">]</span> <span class="o">&lt;</span><span class="mi">40</span><span class="p">))]</span>
<span class="n">filtered_df</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_id</th>
      <th>movie_id</th>
      <th>rating</th>
      <th>timestamp</th>
      <th>age</th>
      <th>gender</th>
      <th>occupation</th>
      <th>zip_code</th>
      <th>movie_title</th>
      <th>release_date</th>
      <th>...</th>
      <th>Fantasy</th>
      <th>Film-Noir</th>
      <th>Horror</th>
      <th>Musical</th>
      <th>Mystery</th>
      <th>Romance</th>
      <th>Sci-Fi</th>
      <th>Thriller</th>
      <th>War</th>
      <th>Western</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>13</th>
      <td>18</td>
      <td>242</td>
      <td>5</td>
      <td>880129305</td>
      <td>35.0</td>
      <td>F</td>
      <td>other</td>
      <td>37212</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>27</th>
      <td>129</td>
      <td>242</td>
      <td>4</td>
      <td>883243972</td>
      <td>36.0</td>
      <td>F</td>
      <td>marketing</td>
      <td>07039</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>39</th>
      <td>34</td>
      <td>242</td>
      <td>5</td>
      <td>888601628</td>
      <td>38.0</td>
      <td>F</td>
      <td>administrator</td>
      <td>42141</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>42</th>
      <td>209</td>
      <td>242</td>
      <td>4</td>
      <td>883589606</td>
      <td>33.0</td>
      <td>F</td>
      <td>educator</td>
      <td>85710</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>110</th>
      <td>861</td>
      <td>242</td>
      <td>5</td>
      <td>881274504</td>
      <td>38.0</td>
      <td>F</td>
      <td>NaN</td>
      <td>14085</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>147</th>
      <td>11</td>
      <td>393</td>
      <td>4</td>
      <td>891905222</td>
      <td>39.0</td>
      <td>F</td>
      <td>other</td>
      <td>30329</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>157</th>
      <td>269</td>
      <td>393</td>
      <td>1</td>
      <td>891451036</td>
      <td>31.0</td>
      <td>F</td>
      <td>librarian</td>
      <td>43201</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>160</th>
      <td>5</td>
      <td>393</td>
      <td>2</td>
      <td>875636265</td>
      <td>33.0</td>
      <td>F</td>
      <td>other</td>
      <td>15213</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>161</th>
      <td>18</td>
      <td>393</td>
      <td>3</td>
      <td>880130930</td>
      <td>35.0</td>
      <td>F</td>
      <td>NaN</td>
      <td>37212</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>167</th>
      <td>151</td>
      <td>393</td>
      <td>2</td>
      <td>879528692</td>
      <td>38.0</td>
      <td>F</td>
      <td>administrator</td>
      <td>48103</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>178</th>
      <td>152</td>
      <td>393</td>
      <td>5</td>
      <td>884018430</td>
      <td>33.0</td>
      <td>F</td>
      <td>educator</td>
      <td>68767</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>187</th>
      <td>330</td>
      <td>393</td>
      <td>4</td>
      <td>876547004</td>
      <td>35.0</td>
      <td>F</td>
      <td>educator</td>
      <td>33884</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>210</th>
      <td>450</td>
      <td>393</td>
      <td>4</td>
      <td>882812349</td>
      <td>35.0</td>
      <td>F</td>
      <td>educator</td>
      <td>11758</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>213</th>
      <td>457</td>
      <td>393</td>
      <td>3</td>
      <td>882548583</td>
      <td>33.0</td>
      <td>F</td>
      <td>salesman</td>
      <td>30011</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>241</th>
      <td>577</td>
      <td>393</td>
      <td>4</td>
      <td>880475363</td>
      <td>36.0</td>
      <td>F</td>
      <td>student</td>
      <td>77845</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>246</th>
      <td>593</td>
      <td>393</td>
      <td>4</td>
      <td>886194041</td>
      <td>31.0</td>
      <td>F</td>
      <td>educator</td>
      <td>68767</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>267</th>
      <td>716</td>
      <td>393</td>
      <td>3</td>
      <td>879796596</td>
      <td>36.0</td>
      <td>F</td>
      <td>administrator</td>
      <td>44265</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>280</th>
      <td>796</td>
      <td>393</td>
      <td>4</td>
      <td>893218933</td>
      <td>32.0</td>
      <td>F</td>
      <td>writer</td>
      <td>33755</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>325</th>
      <td>264</td>
      <td>381</td>
      <td>4</td>
      <td>886123596</td>
      <td>36.0</td>
      <td>F</td>
      <td>writer</td>
      <td>90064</td>
      <td>Muriel's Wedding (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>328</th>
      <td>5</td>
      <td>381</td>
      <td>1</td>
      <td>875636540</td>
      <td>33.0</td>
      <td>F</td>
      <td>other</td>
      <td>15213</td>
      <td>Muriel's Wedding (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>329</th>
      <td>18</td>
      <td>381</td>
      <td>4</td>
      <td>880131474</td>
      <td>35.0</td>
      <td>F</td>
      <td>other</td>
      <td>37212</td>
      <td>Muriel's Wedding (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>330</th>
      <td>256</td>
      <td>381</td>
      <td>5</td>
      <td>882165135</td>
      <td>35.0</td>
      <td>F</td>
      <td>none</td>
      <td>39042</td>
      <td>Muriel's Wedding (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>331</th>
      <td>151</td>
      <td>381</td>
      <td>5</td>
      <td>879528754</td>
      <td>38.0</td>
      <td>F</td>
      <td>administrator</td>
      <td>48103</td>
      <td>Muriel's Wedding (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>358</th>
      <td>450</td>
      <td>381</td>
      <td>2</td>
      <td>882374497</td>
      <td>35.0</td>
      <td>F</td>
      <td>educator</td>
      <td>11758</td>
      <td>Muriel's Wedding (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>384</th>
      <td>716</td>
      <td>381</td>
      <td>4</td>
      <td>879795644</td>
      <td>36.0</td>
      <td>F</td>
      <td>administrator</td>
      <td>44265</td>
      <td>Muriel's Wedding (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>387</th>
      <td>786</td>
      <td>381</td>
      <td>3</td>
      <td>882843397</td>
      <td>36.0</td>
      <td>F</td>
      <td>engineer</td>
      <td>01754</td>
      <td>Muriel's Wedding (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>388</th>
      <td>796</td>
      <td>381</td>
      <td>3</td>
      <td>893047208</td>
      <td>32.0</td>
      <td>F</td>
      <td>writer</td>
      <td>33755</td>
      <td>Muriel's Wedding (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>397</th>
      <td>861</td>
      <td>381</td>
      <td>4</td>
      <td>881274780</td>
      <td>38.0</td>
      <td>F</td>
      <td>student</td>
      <td>14085</td>
      <td>Muriel's Wedding (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>406</th>
      <td>911</td>
      <td>381</td>
      <td>5</td>
      <td>892839846</td>
      <td>37.0</td>
      <td>F</td>
      <td>writer</td>
      <td>53210</td>
      <td>Muriel's Wedding (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>423</th>
      <td>79</td>
      <td>251</td>
      <td>5</td>
      <td>891271545</td>
      <td>39.0</td>
      <td>F</td>
      <td>administrator</td>
      <td>03755</td>
      <td>Shall We Dance? (1996)</td>
      <td>1997-07-11</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
      <td>...</td>
    </tr>
    <tr>
      <th>99139</th>
      <td>5</td>
      <td>374</td>
      <td>3</td>
      <td>875636905</td>
      <td>33.0</td>
      <td>F</td>
      <td>other</td>
      <td>15213</td>
      <td>Mighty Morphin Power Rangers: The Movie (1995)</td>
      <td>1995-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99146</th>
      <td>911</td>
      <td>374</td>
      <td>1</td>
      <td>892841118</td>
      <td>37.0</td>
      <td>F</td>
      <td>writer</td>
      <td>53210</td>
      <td>Mighty Morphin Power Rangers: The Movie (1995)</td>
      <td>1995-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99189</th>
      <td>18</td>
      <td>958</td>
      <td>5</td>
      <td>880129731</td>
      <td>35.0</td>
      <td>F</td>
      <td>other</td>
      <td>37212</td>
      <td>To Live (Huozhe) (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99235</th>
      <td>450</td>
      <td>1249</td>
      <td>3</td>
      <td>882812821</td>
      <td>35.0</td>
      <td>F</td>
      <td>educator</td>
      <td>11758</td>
      <td>For Love or Money (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99249</th>
      <td>796</td>
      <td>1055</td>
      <td>3</td>
      <td>893188577</td>
      <td>32.0</td>
      <td>F</td>
      <td>writer</td>
      <td>33755</td>
      <td>Simple Twist of Fate, A (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99255</th>
      <td>264</td>
      <td>1474</td>
      <td>2</td>
      <td>886123728</td>
      <td>36.0</td>
      <td>F</td>
      <td>writer</td>
      <td>90064</td>
      <td>Nina Takes a Lover (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99261</th>
      <td>264</td>
      <td>1475</td>
      <td>2</td>
      <td>886123596</td>
      <td>36.0</td>
      <td>F</td>
      <td>writer</td>
      <td>90064</td>
      <td>Bhaji on the Beach (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99279</th>
      <td>938</td>
      <td>1254</td>
      <td>1</td>
      <td>891357019</td>
      <td>38.0</td>
      <td>F</td>
      <td>technician</td>
      <td>55038</td>
      <td>Gone Fishin' (1997)</td>
      <td>1997-05-30</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99294</th>
      <td>269</td>
      <td>1479</td>
      <td>2</td>
      <td>891451111</td>
      <td>31.0</td>
      <td>F</td>
      <td>librarian</td>
      <td>43201</td>
      <td>Reckless (1995)</td>
      <td>1995-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99298</th>
      <td>450</td>
      <td>1479</td>
      <td>3</td>
      <td>882377479</td>
      <td>35.0</td>
      <td>F</td>
      <td>educator</td>
      <td>11758</td>
      <td>Reckless (1995)</td>
      <td>1995-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99313</th>
      <td>5</td>
      <td>267</td>
      <td>4</td>
      <td>875635064</td>
      <td>33.0</td>
      <td>F</td>
      <td>other</td>
      <td>15213</td>
      <td>unknown</td>
      <td>NaT</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99324</th>
      <td>18</td>
      <td>113</td>
      <td>5</td>
      <td>880129628</td>
      <td>35.0</td>
      <td>F</td>
      <td>other</td>
      <td>37212</td>
      <td>Horseman on the Roof, The (Hussard sur le toit...</td>
      <td>1996-04-19</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99333</th>
      <td>18</td>
      <td>973</td>
      <td>3</td>
      <td>880129595</td>
      <td>35.0</td>
      <td>F</td>
      <td>other</td>
      <td>37212</td>
      <td>Grateful Dead (1995)</td>
      <td>1996-10-18</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99352</th>
      <td>151</td>
      <td>1297</td>
      <td>1</td>
      <td>879542847</td>
      <td>38.0</td>
      <td>F</td>
      <td>administrator</td>
      <td>48103</td>
      <td>Love Affair (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99359</th>
      <td>450</td>
      <td>1297</td>
      <td>4</td>
      <td>882812635</td>
      <td>35.0</td>
      <td>F</td>
      <td>educator</td>
      <td>11758</td>
      <td>Love Affair (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99361</th>
      <td>796</td>
      <td>1297</td>
      <td>2</td>
      <td>893047504</td>
      <td>32.0</td>
      <td>F</td>
      <td>writer</td>
      <td>33755</td>
      <td>Love Affair (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99364</th>
      <td>151</td>
      <td>1299</td>
      <td>4</td>
      <td>879543423</td>
      <td>38.0</td>
      <td>F</td>
      <td>administrator</td>
      <td>48103</td>
      <td>Penny Serenade (1941)</td>
      <td>1941-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99370</th>
      <td>796</td>
      <td>1299</td>
      <td>2</td>
      <td>892676043</td>
      <td>32.0</td>
      <td>F</td>
      <td>writer</td>
      <td>33755</td>
      <td>Penny Serenade (1941)</td>
      <td>1941-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99452</th>
      <td>688</td>
      <td>1127</td>
      <td>5</td>
      <td>884153606</td>
      <td>37.0</td>
      <td>F</td>
      <td>administrator</td>
      <td>60476</td>
      <td>Truman Show, The (1998)</td>
      <td>1998-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99477</th>
      <td>34</td>
      <td>1024</td>
      <td>5</td>
      <td>888602618</td>
      <td>38.0</td>
      <td>F</td>
      <td>administrator</td>
      <td>42141</td>
      <td>Mrs. Dalloway (1997)</td>
      <td>1997-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99501</th>
      <td>129</td>
      <td>1176</td>
      <td>4</td>
      <td>883244059</td>
      <td>36.0</td>
      <td>F</td>
      <td>marketing</td>
      <td>07039</td>
      <td>Welcome To Sarajevo (1997)</td>
      <td>1997-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99541</th>
      <td>356</td>
      <td>1294</td>
      <td>4</td>
      <td>891405721</td>
      <td>32.0</td>
      <td>F</td>
      <td>homemaker</td>
      <td>92688</td>
      <td>Ayn Rand: A Sense of Life (1997)</td>
      <td>1998-02-13</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99561</th>
      <td>796</td>
      <td>1415</td>
      <td>3</td>
      <td>893219254</td>
      <td>32.0</td>
      <td>F</td>
      <td>writer</td>
      <td>33755</td>
      <td>Next Karate Kid, The (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99630</th>
      <td>450</td>
      <td>1518</td>
      <td>4</td>
      <td>887138957</td>
      <td>35.0</td>
      <td>F</td>
      <td>educator</td>
      <td>11758</td>
      <td>Losing Isaiah (1995)</td>
      <td>1995-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99642</th>
      <td>577</td>
      <td>1517</td>
      <td>3</td>
      <td>880475644</td>
      <td>36.0</td>
      <td>F</td>
      <td>student</td>
      <td>77845</td>
      <td>Race the Sun (1996)</td>
      <td>1996-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99648</th>
      <td>450</td>
      <td>1521</td>
      <td>3</td>
      <td>882812350</td>
      <td>35.0</td>
      <td>F</td>
      <td>educator</td>
      <td>11758</td>
      <td>Mr. Wonderful (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99660</th>
      <td>796</td>
      <td>1522</td>
      <td>3</td>
      <td>893194740</td>
      <td>32.0</td>
      <td>F</td>
      <td>writer</td>
      <td>33755</td>
      <td>Trial by Jury (1994)</td>
      <td>1994-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>1</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99695</th>
      <td>577</td>
      <td>1531</td>
      <td>4</td>
      <td>880475408</td>
      <td>36.0</td>
      <td>F</td>
      <td>student</td>
      <td>77845</td>
      <td>Far From Home: The Adventures of Yellow Dog (1...</td>
      <td>1995-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99852</th>
      <td>450</td>
      <td>1603</td>
      <td>3</td>
      <td>887139728</td>
      <td>35.0</td>
      <td>F</td>
      <td>educator</td>
      <td>11758</td>
      <td>Angela (1995)</td>
      <td>1996-02-16</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>99981</th>
      <td>839</td>
      <td>1664</td>
      <td>1</td>
      <td>875752902</td>
      <td>38.0</td>
      <td>F</td>
      <td>entertainment</td>
      <td>90814</td>
      <td>8 Heads in a Duffel Bag (1997)</td>
      <td>1997-04-18</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>5183 rows × 30 columns</p>
</div>

<h4 id="note">Note</h4>
<p>In the above fragment you HAVE TO ADD parantheses to each and every argument that is being compared else you will get an error.</p>

<p>As you can see after filtering result tables (i.e. DataFrames) have non-ordered indexes. To fix this trouble you may write the following:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">filtered_df</span> <span class="o">=</span> <span class="n">filtered_df</span><span class="p">.</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">filtered_df</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>index</th>
      <th>user_id</th>
      <th>movie_id</th>
      <th>rating</th>
      <th>timestamp</th>
      <th>age</th>
      <th>gender</th>
      <th>occupation</th>
      <th>zip_code</th>
      <th>movie_title</th>
      <th>...</th>
      <th>Fantasy</th>
      <th>Film-Noir</th>
      <th>Horror</th>
      <th>Musical</th>
      <th>Mystery</th>
      <th>Romance</th>
      <th>Sci-Fi</th>
      <th>Thriller</th>
      <th>War</th>
      <th>Western</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>13</td>
      <td>18</td>
      <td>242</td>
      <td>5</td>
      <td>880129305</td>
      <td>35.0</td>
      <td>F</td>
      <td>other</td>
      <td>37212</td>
      <td>Kolya (1996)</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>27</td>
      <td>129</td>
      <td>242</td>
      <td>4</td>
      <td>883243972</td>
      <td>36.0</td>
      <td>F</td>
      <td>marketing</td>
      <td>07039</td>
      <td>Kolya (1996)</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>39</td>
      <td>34</td>
      <td>242</td>
      <td>5</td>
      <td>888601628</td>
      <td>38.0</td>
      <td>F</td>
      <td>administrator</td>
      <td>42141</td>
      <td>Kolya (1996)</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>42</td>
      <td>209</td>
      <td>242</td>
      <td>4</td>
      <td>883589606</td>
      <td>33.0</td>
      <td>F</td>
      <td>educator</td>
      <td>85710</td>
      <td>Kolya (1996)</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>110</td>
      <td>861</td>
      <td>242</td>
      <td>5</td>
      <td>881274504</td>
      <td>38.0</td>
      <td>F</td>
      <td>NaN</td>
      <td>14085</td>
      <td>Kolya (1996)</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>147</td>
      <td>11</td>
      <td>393</td>
      <td>4</td>
      <td>891905222</td>
      <td>39.0</td>
      <td>F</td>
      <td>other</td>
      <td>30329</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>157</td>
      <td>269</td>
      <td>393</td>
      <td>1</td>
      <td>891451036</td>
      <td>31.0</td>
      <td>F</td>
      <td>librarian</td>
      <td>43201</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>160</td>
      <td>5</td>
      <td>393</td>
      <td>2</td>
      <td>875636265</td>
      <td>33.0</td>
      <td>F</td>
      <td>other</td>
      <td>15213</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>161</td>
      <td>18</td>
      <td>393</td>
      <td>3</td>
      <td>880130930</td>
      <td>35.0</td>
      <td>F</td>
      <td>NaN</td>
      <td>37212</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>167</td>
      <td>151</td>
      <td>393</td>
      <td>2</td>
      <td>879528692</td>
      <td>38.0</td>
      <td>F</td>
      <td>administrator</td>
      <td>48103</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>10 rows × 31 columns</p>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># set 'user_id' 'movie_id' as index
</span><span class="n">filtered_df_new</span> <span class="o">=</span> <span class="n">filtered_df</span><span class="p">.</span><span class="n">set_index</span><span class="p">([</span><span class="s">'user_id'</span><span class="p">,</span><span class="s">'movie_id'</span><span class="p">])</span>
<span class="n">filtered_df_new</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>

<span class="c1"># Note that set_index takes only a list as an argument to it.
# if you remove the [] then only the first argument is set as the index.
</span></code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th></th>
      <th>index</th>
      <th>rating</th>
      <th>timestamp</th>
      <th>age</th>
      <th>gender</th>
      <th>occupation</th>
      <th>zip_code</th>
      <th>movie_title</th>
      <th>release_date</th>
      <th>IMDb_URL</th>
      <th>...</th>
      <th>Fantasy</th>
      <th>Film-Noir</th>
      <th>Horror</th>
      <th>Musical</th>
      <th>Mystery</th>
      <th>Romance</th>
      <th>Sci-Fi</th>
      <th>Thriller</th>
      <th>War</th>
      <th>Western</th>
    </tr>
    <tr>
      <th>user_id</th>
      <th>movie_id</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>18</th>
      <th>242</th>
      <td>13</td>
      <td>5</td>
      <td>880129305</td>
      <td>35.0</td>
      <td>F</td>
      <td>other</td>
      <td>37212</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>http://us.imdb.com/M/title-exact?Kolya%20(1996)</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>129</th>
      <th>242</th>
      <td>27</td>
      <td>4</td>
      <td>883243972</td>
      <td>36.0</td>
      <td>F</td>
      <td>marketing</td>
      <td>07039</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>http://us.imdb.com/M/title-exact?Kolya%20(1996)</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>34</th>
      <th>242</th>
      <td>39</td>
      <td>5</td>
      <td>888601628</td>
      <td>38.0</td>
      <td>F</td>
      <td>administrator</td>
      <td>42141</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>http://us.imdb.com/M/title-exact?Kolya%20(1996)</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>209</th>
      <th>242</th>
      <td>42</td>
      <td>4</td>
      <td>883589606</td>
      <td>33.0</td>
      <td>F</td>
      <td>educator</td>
      <td>85710</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>http://us.imdb.com/M/title-exact?Kolya%20(1996)</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>861</th>
      <th>242</th>
      <td>110</td>
      <td>5</td>
      <td>881274504</td>
      <td>38.0</td>
      <td>F</td>
      <td>NaN</td>
      <td>14085</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>http://us.imdb.com/M/title-exact?Kolya%20(1996)</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>11</th>
      <th>393</th>
      <td>147</td>
      <td>4</td>
      <td>891905222</td>
      <td>39.0</td>
      <td>F</td>
      <td>other</td>
      <td>30329</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>http://us.imdb.com/M/title-exact?Mrs.%20Doubtf...</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>269</th>
      <th>393</th>
      <td>157</td>
      <td>1</td>
      <td>891451036</td>
      <td>31.0</td>
      <td>F</td>
      <td>librarian</td>
      <td>43201</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>http://us.imdb.com/M/title-exact?Mrs.%20Doubtf...</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>5</th>
      <th>393</th>
      <td>160</td>
      <td>2</td>
      <td>875636265</td>
      <td>33.0</td>
      <td>F</td>
      <td>other</td>
      <td>15213</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>http://us.imdb.com/M/title-exact?Mrs.%20Doubtf...</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>18</th>
      <th>393</th>
      <td>161</td>
      <td>3</td>
      <td>880130930</td>
      <td>35.0</td>
      <td>F</td>
      <td>NaN</td>
      <td>37212</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>http://us.imdb.com/M/title-exact?Mrs.%20Doubtf...</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>151</th>
      <th>393</th>
      <td>167</td>
      <td>2</td>
      <td>879528692</td>
      <td>38.0</td>
      <td>F</td>
      <td>administrator</td>
      <td>48103</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>http://us.imdb.com/M/title-exact?Mrs.%20Doubtf...</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>10 rows × 29 columns</p>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># By default, `set_index()` returns a new DataFrame.
# so you’ll have to specify if you’d like the changes to occur in place.
# Here we used filtered_df_new to get the new dataframe and now see the type of filtererd_df_new
</span>
<span class="k">print</span><span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">filtered_df_new</span><span class="p">.</span><span class="n">index</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.indexes.multi.MultiIndex'&gt;
</code></pre></div></div>

<p>Notice here that we now have a new sort of ‘index’ which is <code class="language-plaintext highlighter-rouge">MultiIndex</code>, which contains information about indexing of DataFrame and allows manipulating with this data.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">filtered_df_new</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">names</span>
<span class="c1"># Gives you the names of the two index values we set as a FrozenList
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FrozenList(['user_id', 'movie_id'])
</code></pre></div></div>

<p>Method <code class="language-plaintext highlighter-rouge">get_level_values()</code> allows to get all values for the corresponding index level.
<code class="language-plaintext highlighter-rouge">get_level_values(0)</code> corresponds to ‘user_id’ and <code class="language-plaintext highlighter-rouge">get_level_values(1)</code> corresponds to ‘movie_id’</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">filtered_df_new</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">get_level_values</span><span class="p">(</span><span class="mi">0</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">filtered_df_new</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="n">get_level_values</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Int64Index([ 18, 129,  34, 209, 861,  11, 269,   5,  18, 151,
            ...
            129, 356, 796, 450, 577, 450, 796, 577, 450, 839],
           dtype='int64', name='user_id', length=5183)
Int64Index([ 242,  242,  242,  242,  242,  393,  393,  393,  393,  393,
            ...
            1176, 1294, 1415, 1518, 1517, 1521, 1522, 1531, 1603, 1664],
           dtype='int64', name='movie_id', length=5183)
</code></pre></div></div>

<hr />
<h3 id="selection-by-label-and-position">Selection by label and position</h3>
<p>Object selection in pandas is now supported by three types of multi-axis indexing.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">.loc</code> works on labels in the index;</li>
  <li><code class="language-plaintext highlighter-rouge">.iloc</code> works on the positions in the index (so it only takes integers);</li>
</ul>

<p>The sequence of the following examples demonstrates how we can manipulate with DataFrame’s rows.
At first let’s get the first row of movies:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movies</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>user_id                                                     196
movie_id                                                    242
rating                                                        3
timestamp                                             881250949
age                                                          49
gender                                                        M
occupation                                               writer
zip_code                                                  55105
movie_title                                        Kolya (1996)
release_date                                1997-01-24 00:00:00
IMDb_URL        http://us.imdb.com/M/title-exact?Kolya%20(1996)
unknown                                                       0
Action                                                        0
Adventure                                                     0
Animation                                                     0
Childrens                                                     0
Comedy                                                        1
Crime                                                         0
Documentary                                                   0
Drama                                                         0
Fantasy                                                       0
Film-Noir                                                     0
Horror                                                        0
Musical                                                       0
Mystery                                                       0
Romance                                                       0
Sci-Fi                                                        0
Thriller                                                      0
War                                                           0
Western                                                       0
Name: 0, dtype: object
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movies</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span><span class="p">]</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_id</th>
      <th>movie_id</th>
      <th>rating</th>
      <th>timestamp</th>
      <th>age</th>
      <th>gender</th>
      <th>occupation</th>
      <th>zip_code</th>
      <th>movie_title</th>
      <th>release_date</th>
      <th>...</th>
      <th>Fantasy</th>
      <th>Film-Noir</th>
      <th>Horror</th>
      <th>Musical</th>
      <th>Mystery</th>
      <th>Romance</th>
      <th>Sci-Fi</th>
      <th>Thriller</th>
      <th>War</th>
      <th>Western</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>305</td>
      <td>242</td>
      <td>5</td>
      <td>886307828</td>
      <td>23.0</td>
      <td>M</td>
      <td>programmer</td>
      <td>94086</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>6</td>
      <td>242</td>
      <td>4</td>
      <td>883268170</td>
      <td>42.0</td>
      <td>M</td>
      <td>executive</td>
      <td>98101</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>234</td>
      <td>242</td>
      <td>4</td>
      <td>891033261</td>
      <td>60.0</td>
      <td>M</td>
      <td>retired</td>
      <td>94702</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>3 rows × 30 columns</p>
</div>

<p>If you want to return specific columns then you have to specify them as a separate argument of .loc</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movies</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">3</span> <span class="p">,</span> <span class="s">'movie_title'</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1    Kolya (1996)
2    Kolya (1996)
3    Kolya (1996)
Name: movie_title, dtype: object
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movies</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">5</span> <span class="p">,</span> <span class="p">[</span><span class="s">'movie_title'</span><span class="p">,</span><span class="s">'age'</span><span class="p">,</span><span class="s">'gender'</span><span class="p">]]</span>
<span class="c1"># If more than one column is to be selected then you have to give the second argument of .loc as a list
</span></code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>movie_title</th>
      <th>age</th>
      <th>gender</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>Kolya (1996)</td>
      <td>23.0</td>
      <td>M</td>
    </tr>
    <tr>
      <th>2</th>
      <td>Kolya (1996)</td>
      <td>42.0</td>
      <td>M</td>
    </tr>
    <tr>
      <th>3</th>
      <td>Kolya (1996)</td>
      <td>60.0</td>
      <td>M</td>
    </tr>
    <tr>
      <th>4</th>
      <td>Kolya (1996)</td>
      <td>31.0</td>
      <td>M</td>
    </tr>
    <tr>
      <th>5</th>
      <td>Kolya (1996)</td>
      <td>26.0</td>
      <td>M</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># movies.iloc[1:5 , ['movie_title','age','gender']]
# Gives error as iloc only uses integer values
</span></code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movies</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>user_id                                                     196
movie_id                                                    242
rating                                                        3
timestamp                                             881250949
age                                                          49
gender                                                        M
occupation                                               writer
zip_code                                                  55105
movie_title                                        Kolya (1996)
release_date                                1997-01-24 00:00:00
IMDb_URL        http://us.imdb.com/M/title-exact?Kolya%20(1996)
unknown                                                       0
Action                                                        0
Adventure                                                     0
Animation                                                     0
Childrens                                                     0
Comedy                                                        1
Crime                                                         0
Documentary                                                   0
Drama                                                         0
Fantasy                                                       0
Film-Noir                                                     0
Horror                                                        0
Musical                                                       0
Mystery                                                       0
Romance                                                       0
Sci-Fi                                                        0
Thriller                                                      0
War                                                           0
Western                                                       0
Name: 0, dtype: object
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movies</span><span class="p">.</span><span class="n">iloc</span><span class="p">[</span><span class="mi">1</span><span class="p">:</span><span class="mi">5</span><span class="p">]</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_id</th>
      <th>movie_id</th>
      <th>rating</th>
      <th>timestamp</th>
      <th>age</th>
      <th>gender</th>
      <th>occupation</th>
      <th>zip_code</th>
      <th>movie_title</th>
      <th>release_date</th>
      <th>...</th>
      <th>Fantasy</th>
      <th>Film-Noir</th>
      <th>Horror</th>
      <th>Musical</th>
      <th>Mystery</th>
      <th>Romance</th>
      <th>Sci-Fi</th>
      <th>Thriller</th>
      <th>War</th>
      <th>Western</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>305</td>
      <td>242</td>
      <td>5</td>
      <td>886307828</td>
      <td>23.0</td>
      <td>M</td>
      <td>programmer</td>
      <td>94086</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>6</td>
      <td>242</td>
      <td>4</td>
      <td>883268170</td>
      <td>42.0</td>
      <td>M</td>
      <td>executive</td>
      <td>98101</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>234</td>
      <td>242</td>
      <td>4</td>
      <td>891033261</td>
      <td>60.0</td>
      <td>M</td>
      <td>retired</td>
      <td>94702</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>63</td>
      <td>242</td>
      <td>3</td>
      <td>875747190</td>
      <td>31.0</td>
      <td>M</td>
      <td>marketing</td>
      <td>75240</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>4 rows × 30 columns</p>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># movies.select(lambda x: x%2==0).head() is the same as :
</span><span class="n">movies</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">movies</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span><span class="p">)].</span><span class="n">head</span><span class="p">()</span>

<span class="c1"># .select() has been deprecated for now and will be completely removed in future updates so use .loc
</span></code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_id</th>
      <th>movie_id</th>
      <th>rating</th>
      <th>timestamp</th>
      <th>age</th>
      <th>gender</th>
      <th>occupation</th>
      <th>zip_code</th>
      <th>movie_title</th>
      <th>release_date</th>
      <th>...</th>
      <th>Fantasy</th>
      <th>Film-Noir</th>
      <th>Horror</th>
      <th>Musical</th>
      <th>Mystery</th>
      <th>Romance</th>
      <th>Sci-Fi</th>
      <th>Thriller</th>
      <th>War</th>
      <th>Western</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>196</td>
      <td>242</td>
      <td>3</td>
      <td>881250949</td>
      <td>49.0</td>
      <td>M</td>
      <td>writer</td>
      <td>55105</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>6</td>
      <td>242</td>
      <td>4</td>
      <td>883268170</td>
      <td>42.0</td>
      <td>M</td>
      <td>executive</td>
      <td>98101</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>63</td>
      <td>242</td>
      <td>3</td>
      <td>875747190</td>
      <td>31.0</td>
      <td>M</td>
      <td>marketing</td>
      <td>75240</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>201</td>
      <td>242</td>
      <td>4</td>
      <td>884110598</td>
      <td>27.0</td>
      <td>M</td>
      <td>writer</td>
      <td>E2A4H</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>13</td>
      <td>242</td>
      <td>2</td>
      <td>881515193</td>
      <td>47.0</td>
      <td>M</td>
      <td>educator</td>
      <td>29206</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 30 columns</p>
</div>

<hr />

<h2 id="working-with-missing-data">Working with Missing Data</h2>
<p>Pandas primarily uses the value np.nan to represent missing data (in table missed/empty value are marked by NaN). It is by default not included in computations. Missing data creates many issues at mathematical or computational tasks with DataFrames and Series and it’s important to know how fight with these values.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ages</span> <span class="o">=</span> <span class="n">movies</span><span class="p">[</span><span class="s">'age'</span><span class="p">]</span>
<span class="nb">sum</span><span class="p">(</span><span class="n">ages</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nan
</code></pre></div></div>

<p>This is because there are so many cases where Age isn’t given and hence takes on the value of np.nan.
We can use <code class="language-plaintext highlighter-rouge">fillna()</code>a very effecient pandas method for filling missing values</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ages</span> <span class="o">=</span> <span class="n">movies</span><span class="p">[</span><span class="s">'age'</span><span class="p">].</span><span class="n">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="nb">sum</span><span class="p">(</span><span class="n">ages</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3089983.0
</code></pre></div></div>

<p>This fills all the values with 0 and calculates the sum.
To remain only rows with non-null values you can use method <code class="language-plaintext highlighter-rouge">dropna()</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">ages</span> <span class="o">=</span> <span class="n">movies</span><span class="p">[</span><span class="s">'age'</span><span class="p">].</span><span class="n">dropna</span><span class="p">()</span>
<span class="nb">sum</span><span class="p">(</span><span class="n">ages</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>3089983.0
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movies_nonnull</span> <span class="o">=</span> <span class="n">movies</span><span class="p">.</span><span class="n">dropna</span><span class="p">()</span>
<span class="n">movies_nonnull</span><span class="p">.</span><span class="n">head</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
<span class="c1">#14th value was dropped because it had a missing value in a column
</span></code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_id</th>
      <th>movie_id</th>
      <th>rating</th>
      <th>timestamp</th>
      <th>age</th>
      <th>gender</th>
      <th>occupation</th>
      <th>zip_code</th>
      <th>movie_title</th>
      <th>release_date</th>
      <th>...</th>
      <th>Fantasy</th>
      <th>Film-Noir</th>
      <th>Horror</th>
      <th>Musical</th>
      <th>Mystery</th>
      <th>Romance</th>
      <th>Sci-Fi</th>
      <th>Thriller</th>
      <th>War</th>
      <th>Western</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>196</td>
      <td>242</td>
      <td>3</td>
      <td>881250949</td>
      <td>49.0</td>
      <td>M</td>
      <td>writer</td>
      <td>55105</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>1</th>
      <td>305</td>
      <td>242</td>
      <td>5</td>
      <td>886307828</td>
      <td>23.0</td>
      <td>M</td>
      <td>programmer</td>
      <td>94086</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>2</th>
      <td>6</td>
      <td>242</td>
      <td>4</td>
      <td>883268170</td>
      <td>42.0</td>
      <td>M</td>
      <td>executive</td>
      <td>98101</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>3</th>
      <td>234</td>
      <td>242</td>
      <td>4</td>
      <td>891033261</td>
      <td>60.0</td>
      <td>M</td>
      <td>retired</td>
      <td>94702</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>4</th>
      <td>63</td>
      <td>242</td>
      <td>3</td>
      <td>875747190</td>
      <td>31.0</td>
      <td>M</td>
      <td>marketing</td>
      <td>75240</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>5</th>
      <td>181</td>
      <td>242</td>
      <td>1</td>
      <td>878961814</td>
      <td>26.0</td>
      <td>M</td>
      <td>executive</td>
      <td>21218</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>6</th>
      <td>201</td>
      <td>242</td>
      <td>4</td>
      <td>884110598</td>
      <td>27.0</td>
      <td>M</td>
      <td>writer</td>
      <td>E2A4H</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>7</th>
      <td>249</td>
      <td>242</td>
      <td>5</td>
      <td>879571438</td>
      <td>25.0</td>
      <td>M</td>
      <td>student</td>
      <td>84103</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>8</th>
      <td>13</td>
      <td>242</td>
      <td>2</td>
      <td>881515193</td>
      <td>47.0</td>
      <td>M</td>
      <td>educator</td>
      <td>29206</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>9</th>
      <td>279</td>
      <td>242</td>
      <td>3</td>
      <td>877756647</td>
      <td>33.0</td>
      <td>M</td>
      <td>programmer</td>
      <td>85251</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>10</th>
      <td>145</td>
      <td>242</td>
      <td>5</td>
      <td>875269755</td>
      <td>31.0</td>
      <td>M</td>
      <td>entertainment</td>
      <td>V3N4P</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>11</th>
      <td>90</td>
      <td>242</td>
      <td>4</td>
      <td>891382267</td>
      <td>60.0</td>
      <td>M</td>
      <td>educator</td>
      <td>78155</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>12</th>
      <td>271</td>
      <td>242</td>
      <td>4</td>
      <td>885844495</td>
      <td>51.0</td>
      <td>M</td>
      <td>engineer</td>
      <td>22932</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>13</th>
      <td>18</td>
      <td>242</td>
      <td>5</td>
      <td>880129305</td>
      <td>35.0</td>
      <td>F</td>
      <td>other</td>
      <td>37212</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>15</th>
      <td>207</td>
      <td>242</td>
      <td>4</td>
      <td>890793823</td>
      <td>39.0</td>
      <td>M</td>
      <td>marketing</td>
      <td>92037</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>16</th>
      <td>14</td>
      <td>242</td>
      <td>4</td>
      <td>876964570</td>
      <td>45.0</td>
      <td>M</td>
      <td>scientist</td>
      <td>55106</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>17</th>
      <td>113</td>
      <td>242</td>
      <td>2</td>
      <td>875075887</td>
      <td>47.0</td>
      <td>M</td>
      <td>executive</td>
      <td>95032</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>19</th>
      <td>296</td>
      <td>242</td>
      <td>4</td>
      <td>884196057</td>
      <td>43.0</td>
      <td>F</td>
      <td>administrator</td>
      <td>16803</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>20</th>
      <td>154</td>
      <td>242</td>
      <td>3</td>
      <td>879138235</td>
      <td>25.0</td>
      <td>M</td>
      <td>student</td>
      <td>53703</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>21</th>
      <td>270</td>
      <td>242</td>
      <td>5</td>
      <td>876953744</td>
      <td>18.0</td>
      <td>F</td>
      <td>student</td>
      <td>63119</td>
      <td>Kolya (1996)</td>
      <td>1997-01-24</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>20 rows × 30 columns</p>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movies_notnull</span> <span class="o">=</span> <span class="n">movies</span><span class="p">.</span><span class="n">dropna</span><span class="p">(</span><span class="n">how</span><span class="o">=</span><span class="s">'all'</span><span class="p">,</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="s">'age'</span><span class="p">,</span><span class="s">'occupation'</span><span class="p">])</span>
<span class="c1">#Drops all nan values from movies belonging to age and occupation
</span><span class="n">movies_notnull</span><span class="p">.</span><span class="n">info</span><span class="p">()</span>
<span class="c1">#Notice how age and occupation now have nearly 6000 lesser values
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;class 'pandas.core.frame.DataFrame'&gt;
Int64Index: 99616 entries, 0 to 99999
Data columns (total 30 columns):
user_id         99616 non-null int64
movie_id        99616 non-null int64
rating          99616 non-null int64
timestamp       99616 non-null int64
age             93731 non-null float64
gender          99616 non-null object
occupation      93806 non-null object
zip_code        99616 non-null object
movie_title     99616 non-null object
release_date    99607 non-null datetime64[ns]
IMDb_URL        99603 non-null object
unknown         99616 non-null int64
Action          99616 non-null int64
Adventure       99616 non-null int64
Animation       99616 non-null int64
Childrens       99616 non-null int64
Comedy          99616 non-null int64
Crime           99616 non-null int64
Documentary     99616 non-null int64
Drama           99616 non-null int64
Fantasy         99616 non-null int64
Film-Noir       99616 non-null int64
Horror          99616 non-null int64
Musical         99616 non-null int64
Mystery         99616 non-null int64
Romance         99616 non-null int64
Sci-Fi          99616 non-null int64
Thriller        99616 non-null int64
War             99616 non-null int64
Western         99616 non-null int64
dtypes: datetime64[ns](1), float64(1), int64(23), object(5)
memory usage: 23.6+ MB
</code></pre></div></div>

<p>Thus, if <code class="language-plaintext highlighter-rouge">how='all'</code>, we get DataFrame, where all values in both columns from subset are NaN.</p>

<p>If <code class="language-plaintext highlighter-rouge">how='any'</code>, we get DataFrame, where at least one contains NaN.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movies</span><span class="p">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_id</th>
      <th>movie_id</th>
      <th>rating</th>
      <th>timestamp</th>
      <th>age</th>
      <th>unknown</th>
      <th>Action</th>
      <th>Adventure</th>
      <th>Animation</th>
      <th>Childrens</th>
      <th>...</th>
      <th>Fantasy</th>
      <th>Film-Noir</th>
      <th>Horror</th>
      <th>Musical</th>
      <th>Mystery</th>
      <th>Romance</th>
      <th>Sci-Fi</th>
      <th>Thriller</th>
      <th>War</th>
      <th>Western</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>100000.00000</td>
      <td>100000.000000</td>
      <td>100000.000000</td>
      <td>1.000000e+05</td>
      <td>93731.000000</td>
      <td>100000.0000</td>
      <td>100000.000000</td>
      <td>100000.000000</td>
      <td>100000.000000</td>
      <td>100000.000000</td>
      <td>...</td>
      <td>100000.000000</td>
      <td>100000.000000</td>
      <td>100000.000000</td>
      <td>100000.000000</td>
      <td>100000.000000</td>
      <td>100000.000000</td>
      <td>100000.00000</td>
      <td>100000.00000</td>
      <td>100000.000000</td>
      <td>100000.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>462.48475</td>
      <td>425.530130</td>
      <td>3.529860</td>
      <td>8.835289e+08</td>
      <td>32.966500</td>
      <td>0.0001</td>
      <td>0.255890</td>
      <td>0.137530</td>
      <td>0.036050</td>
      <td>0.071820</td>
      <td>...</td>
      <td>0.013520</td>
      <td>0.017330</td>
      <td>0.053170</td>
      <td>0.049540</td>
      <td>0.052450</td>
      <td>0.194610</td>
      <td>0.12730</td>
      <td>0.21872</td>
      <td>0.093980</td>
      <td>0.018540</td>
    </tr>
    <tr>
      <th>std</th>
      <td>266.61442</td>
      <td>330.798356</td>
      <td>1.125674</td>
      <td>5.343856e+06</td>
      <td>11.561809</td>
      <td>0.0100</td>
      <td>0.436362</td>
      <td>0.344408</td>
      <td>0.186416</td>
      <td>0.258191</td>
      <td>...</td>
      <td>0.115487</td>
      <td>0.130498</td>
      <td>0.224373</td>
      <td>0.216994</td>
      <td>0.222934</td>
      <td>0.395902</td>
      <td>0.33331</td>
      <td>0.41338</td>
      <td>0.291802</td>
      <td>0.134894</td>
    </tr>
    <tr>
      <th>min</th>
      <td>1.00000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>8.747247e+08</td>
      <td>7.000000</td>
      <td>0.0000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>...</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.00000</td>
      <td>0.00000</td>
      <td>0.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>254.00000</td>
      <td>175.000000</td>
      <td>3.000000</td>
      <td>8.794487e+08</td>
      <td>24.000000</td>
      <td>0.0000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>...</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.00000</td>
      <td>0.00000</td>
      <td>0.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>447.00000</td>
      <td>322.000000</td>
      <td>4.000000</td>
      <td>8.828269e+08</td>
      <td>30.000000</td>
      <td>0.0000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>...</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.00000</td>
      <td>0.00000</td>
      <td>0.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>682.00000</td>
      <td>631.000000</td>
      <td>4.000000</td>
      <td>8.882600e+08</td>
      <td>40.000000</td>
      <td>0.0000</td>
      <td>1.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>...</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.000000</td>
      <td>0.00000</td>
      <td>0.00000</td>
      <td>0.000000</td>
      <td>0.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>943.00000</td>
      <td>1682.000000</td>
      <td>5.000000</td>
      <td>8.932866e+08</td>
      <td>73.000000</td>
      <td>1.0000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>...</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>1.000000</td>
      <td>1.00000</td>
      <td>1.00000</td>
      <td>1.000000</td>
      <td>1.000000</td>
    </tr>
  </tbody>
</table>
<p>8 rows × 24 columns</p>
</div>

<p>At first, let’s find all unique dates in <code class="language-plaintext highlighter-rouge">‘release_date’</code> column of <code class="language-plaintext highlighter-rouge">movies</code> and then select only dates in range lower than 1995.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movies</span><span class="p">[</span><span class="s">'release_date'</span><span class="p">]</span> <span class="o">=</span> <span class="n">movies</span><span class="p">[</span><span class="s">'release_date'</span><span class="p">].</span><span class="nb">map</span><span class="p">(</span><span class="n">pd</span><span class="p">.</span><span class="n">to_datetime</span><span class="p">)</span>
<span class="c1"># We map it to_datetime as pandas has a set way to deal with dates and then we can effectively work with dates.
</span><span class="n">unique_dates</span> <span class="o">=</span> <span class="n">movies</span><span class="p">[</span><span class="s">'release_date'</span><span class="p">].</span><span class="n">drop_duplicates</span><span class="p">().</span><span class="n">dropna</span><span class="p">()</span>
<span class="c1"># Drops duplicates and nan values
</span><span class="n">unique_dates</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0       1997-01-24
117     1993-01-01
309     1994-01-01
409     1997-07-11
455     1986-01-01
785     1997-01-01
881     1987-01-01
1137    1979-01-01
1253    1996-04-26
1525    1995-01-01
1557    1996-03-08
1850    1996-11-15
2331    1990-01-01
2851    1971-01-01
2972    1978-01-01
3432    1997-07-04
3735    1996-04-12
4269    1996-12-18
4347    1996-04-23
4583    1996-10-04
4745    1997-06-27
4751    1997-01-31
4798    1996-06-28
4961    1988-01-01
5208    1995-10-30
5392    1996-02-09
5863    1996-09-28
6861    1997-05-09
7058    1996-10-11
7186    1997-08-15
           ...    
96679   1996-09-24
96855   1997-01-29
96948   1996-09-04
97195   1996-09-16
97434   1997-12-18
97639   1998-03-17
97816   1996-06-05
98068   1996-12-15
98546   1998-04-03
98574   1996-05-17
98590   1998-03-10
98739   1996-10-26
98748   1998-01-23
98786   1998-03-14
98856   1932-01-01
98969   1996-01-15
99205   1996-04-02
99280   1998-02-20
99321   1997-04-22
99598   1998-10-09
99650   1998-02-01
99702   1996-07-22
99737   1926-01-01
99813   1998-01-21
99885   1998-02-11
99938   1986-04-26
99940   1998-03-06
99958   1996-09-18
99967   1996-02-28
99977   1997-04-30
Name: release_date, Length: 240, dtype: datetime64[ns]
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># find dates with year lower/equal than 1995
</span><span class="n">unique_dates_1</span> <span class="o">=</span> <span class="nb">filter</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">.</span><span class="n">year</span> <span class="o">&lt;=</span> <span class="mi">1995</span><span class="p">,</span> <span class="n">unique_dates</span><span class="p">)</span>
<span class="c1"># filter() takes two arguments. First one should return only boolean values and the second one is the variable over which ititerates over.
# This basically takes unique_dates and uses the lambda function (here, it returns bool values) and filters True cases.
</span>
<span class="n">unique_dates_1</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;filter at 0x1187af6a0&gt;
</code></pre></div></div>

<p>Here we have used <code class="language-plaintext highlighter-rouge">drop_duplicates()</code> method to select only <code class="language-plaintext highlighter-rouge">unique</code> Series values. Then we can filter <code class="language-plaintext highlighter-rouge">movies</code> with respect to <code class="language-plaintext highlighter-rouge">release_date</code> condition. Each <code class="language-plaintext highlighter-rouge">datetime</code> Python object possesses with attributes <code class="language-plaintext highlighter-rouge">year</code>, <code class="language-plaintext highlighter-rouge">month</code>, <code class="language-plaintext highlighter-rouge">day</code>, etc. allowing to extract values of year, month, day, etc. from the date. We call the new DataFrame as <code class="language-plaintext highlighter-rouge">old_movies</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">old_movies</span> <span class="o">=</span> <span class="n">movies</span><span class="p">[</span><span class="n">movies</span><span class="p">[</span><span class="s">'release_date'</span><span class="p">].</span><span class="n">isin</span><span class="p">(</span><span class="n">unique_dates_1</span><span class="p">)]</span>
<span class="n">old_movies</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_id</th>
      <th>movie_id</th>
      <th>rating</th>
      <th>timestamp</th>
      <th>age</th>
      <th>gender</th>
      <th>occupation</th>
      <th>zip_code</th>
      <th>movie_title</th>
      <th>release_date</th>
      <th>...</th>
      <th>Fantasy</th>
      <th>Film-Noir</th>
      <th>Horror</th>
      <th>Musical</th>
      <th>Mystery</th>
      <th>Romance</th>
      <th>Sci-Fi</th>
      <th>Thriller</th>
      <th>War</th>
      <th>Western</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>117</th>
      <td>196</td>
      <td>393</td>
      <td>4</td>
      <td>881251863</td>
      <td>49.0</td>
      <td>M</td>
      <td>writer</td>
      <td>55105</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>118</th>
      <td>22</td>
      <td>393</td>
      <td>4</td>
      <td>878886989</td>
      <td>25.0</td>
      <td>M</td>
      <td>writer</td>
      <td>40206</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>119</th>
      <td>244</td>
      <td>393</td>
      <td>3</td>
      <td>880607365</td>
      <td>28.0</td>
      <td>M</td>
      <td>technician</td>
      <td>80525</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>120</th>
      <td>298</td>
      <td>393</td>
      <td>4</td>
      <td>884183099</td>
      <td>44.0</td>
      <td>M</td>
      <td>executive</td>
      <td>01581</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>121</th>
      <td>286</td>
      <td>393</td>
      <td>4</td>
      <td>877534481</td>
      <td>27.0</td>
      <td>M</td>
      <td>student</td>
      <td>15217</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 30 columns</p>
</div>

<p>Now we may filter DataFrame <code class="language-plaintext highlighter-rouge">old_movies</code> by <code class="language-plaintext highlighter-rouge">age</code> and <code class="language-plaintext highlighter-rouge">rating</code>. Lets’ drop <code class="language-plaintext highlighter-rouge">timestamp</code>, <code class="language-plaintext highlighter-rouge">zip_code</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># get all users with age less than 25 that rated old movies higher than 3
</span><span class="n">old_movies_watch</span> <span class="o">=</span> <span class="n">old_movies</span><span class="p">[(</span><span class="n">old_movies</span><span class="p">[</span><span class="s">'age'</span><span class="p">]</span><span class="o">&lt;</span><span class="mi">25</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">old_movies</span><span class="p">[</span><span class="s">'rating'</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">3</span><span class="p">)]</span>
<span class="c1"># Drop timestamp and zip_code
</span><span class="n">old_movies_watch</span> <span class="o">=</span> <span class="n">old_movies_watch</span><span class="p">.</span><span class="n">drop</span><span class="p">([</span><span class="s">'timestamp'</span><span class="p">,</span> <span class="s">'zip_code'</span><span class="p">],</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="n">old_movies_watch</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>user_id</th>
      <th>movie_id</th>
      <th>rating</th>
      <th>age</th>
      <th>gender</th>
      <th>occupation</th>
      <th>movie_title</th>
      <th>release_date</th>
      <th>IMDb_URL</th>
      <th>unknown</th>
      <th>...</th>
      <th>Fantasy</th>
      <th>Film-Noir</th>
      <th>Horror</th>
      <th>Musical</th>
      <th>Mystery</th>
      <th>Romance</th>
      <th>Sci-Fi</th>
      <th>Thriller</th>
      <th>War</th>
      <th>Western</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>124</th>
      <td>303</td>
      <td>393</td>
      <td>4</td>
      <td>19.0</td>
      <td>M</td>
      <td>student</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>http://us.imdb.com/M/title-exact?Mrs.%20Doubtf...</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>135</th>
      <td>276</td>
      <td>393</td>
      <td>4</td>
      <td>21.0</td>
      <td>M</td>
      <td>student</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>http://us.imdb.com/M/title-exact?Mrs.%20Doubtf...</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>153</th>
      <td>128</td>
      <td>393</td>
      <td>4</td>
      <td>24.0</td>
      <td>F</td>
      <td>marketing</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>http://us.imdb.com/M/title-exact?Mrs.%20Doubtf...</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>162</th>
      <td>130</td>
      <td>393</td>
      <td>5</td>
      <td>20.0</td>
      <td>M</td>
      <td>none</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>http://us.imdb.com/M/title-exact?Mrs.%20Doubtf...</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
    <tr>
      <th>183</th>
      <td>314</td>
      <td>393</td>
      <td>4</td>
      <td>20.0</td>
      <td>F</td>
      <td>student</td>
      <td>Mrs. Doubtfire (1993)</td>
      <td>1993-01-01</td>
      <td>http://us.imdb.com/M/title-exact?Mrs.%20Doubtf...</td>
      <td>0</td>
      <td>...</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
      <td>0</td>
    </tr>
  </tbody>
</table>
<p>5 rows × 28 columns</p>
</div>

<hr />

<p><code class="language-plaintext highlighter-rouge">Pandas</code> has support for accelerating certain types of binary numerical and boolean operations using the <code class="language-plaintext highlighter-rouge">numexpr </code>library (it uses smart chunking, caching, and multiple cores) and the <code class="language-plaintext highlighter-rouge">bottleneck</code> libraries (is a set of specialized cython routines that are especially fast when dealing with arrays that have NaNs). It allows one to increase pandas functionality a lot. This advantage is shown for some boolean and calculation operations. To count the time elapsed on operation performing we will use the decorator</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># this function counts the time for a particular operation
</span>
<span class="k">def</span> <span class="nf">timer</span><span class="p">(</span><span class="n">func</span><span class="p">):</span>
    <span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">):</span>
        <span class="n">start</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">()</span>
        <span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">)</span>
        <span class="n">end</span> <span class="o">=</span> <span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">()</span>
        <span class="k">return</span> <span class="s">'elapsed time = {'</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span><span class="p">)</span><span class="o">+</span><span class="s">'}'</span>
    <span class="k">return</span> <span class="n">wrapper</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">random</span>
<span class="n">n</span> <span class="o">=</span> <span class="mi">100</span>
<span class="c1"># generate rangon datasets
</span><span class="n">df_1</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'col :'</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">):[</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="o">-</span><span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)})</span>
<span class="c1"># here we pass a dictionary to the DataFrame() constructor.
# The key is "col : i" where i can take random values and the value for those keys is i.
</span>
<span class="n">df_2</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'col :'</span><span class="o">+</span><span class="nb">str</span><span class="p">(</span><span class="n">i</span><span class="p">):[</span><span class="n">random</span><span class="p">.</span><span class="n">randint</span><span class="p">(</span><span class="o">-</span><span class="mi">100</span><span class="p">,</span><span class="mi">100</span><span class="p">)</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)})</span>

<span class="o">@</span><span class="n">timer</span>
<span class="k">def</span> <span class="nf">direct_comparison</span><span class="p">(</span><span class="n">df_1</span><span class="p">,</span> <span class="n">df_2</span><span class="p">):</span>
    <span class="n">bool_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'col_{}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">i</span><span class="p">):</span> <span class="p">[</span><span class="bp">True</span> <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)})</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df_1</span><span class="p">.</span><span class="n">index</span><span class="p">)):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">df_1</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">])):</span>
            <span class="k">if</span> <span class="n">df_1</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">df_1</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span> <span class="o">&gt;=</span> <span class="n">df_2</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span> <span class="n">df_2</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="n">j</span><span class="p">]]:</span>
                <span class="n">bool_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">bool_df</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="n">j</span><span class="p">]]</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="n">bool_df</span>

<span class="o">@</span><span class="n">timer</span>
<span class="k">def</span> <span class="nf">pandas_comparison</span><span class="p">(</span><span class="n">df_1</span><span class="p">,</span> <span class="n">df_2</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">df_1</span> <span class="o">&lt;</span> <span class="n">df_2</span>

<span class="k">print</span> <span class="p">(</span><span class="s">'direct_comparison:'</span><span class="p">,</span> <span class="p">(</span><span class="n">direct_comparison</span><span class="p">(</span><span class="n">df_1</span><span class="p">,</span> <span class="n">df_2</span><span class="p">)))</span>
<span class="k">print</span> <span class="p">(</span><span class="s">'pandas_comparison:'</span><span class="p">,</span> <span class="p">(</span><span class="n">pandas_comparison</span><span class="p">(</span><span class="n">df_1</span><span class="p">,</span> <span class="n">df_2</span><span class="p">)))</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>direct_comparison: elapsed time = {0:00:03.362719}
pandas_comparison: elapsed time = {0:00:00.029600}
</code></pre></div></div>

<p>As you can see, the difference in speed is too noticeable.</p>

<p>Besides, pandas possesses methods <code class="language-plaintext highlighter-rouge">eq</code> (equal), <code class="language-plaintext highlighter-rouge">ne</code> (not equal), <code class="language-plaintext highlighter-rouge">lt</code> (less then), <code class="language-plaintext highlighter-rouge">gt</code> (greater than), <code class="language-plaintext highlighter-rouge">le</code> (less or equal) and <code class="language-plaintext highlighter-rouge">ge</code> (greater or equal) for simplifying boolean comparison</p>

<hr />

<h2 id="matrix-addition">Matrix Addition</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'A'</span><span class="p">:[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span><span class="s">'B'</span><span class="p">:[</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">3</span><span class="p">,</span><span class="o">-</span><span class="mi">4</span><span class="p">],</span><span class="s">"C"</span><span class="p">:[</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">]})</span>
<span class="n">dfa</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">({</span><span class="s">'A'</span><span class="p">:[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">],</span><span class="s">'D'</span><span class="p">:[</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">8</span><span class="p">],</span><span class="s">"C"</span><span class="p">:[</span><span class="mi">12</span><span class="p">,</span><span class="mi">12</span><span class="p">,</span><span class="mi">12</span><span class="p">]})</span>
<span class="n">dfc</span> <span class="o">=</span> <span class="n">df</span> <span class="o">+</span> <span class="n">dfa</span>
<span class="n">dfc</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>2</td>
      <td>NaN</td>
      <td>19</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>1</th>
      <td>4</td>
      <td>NaN</td>
      <td>20</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2</th>
      <td>6</td>
      <td>NaN</td>
      <td>21</td>
      <td>NaN</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span><span class="p">.</span><span class="n">le</span><span class="p">(</span><span class="n">dfa</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A</th>
      <th>B</th>
      <th>C</th>
      <th>D</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>True</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
    </tr>
    <tr>
      <th>1</th>
      <td>True</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
    </tr>
    <tr>
      <th>2</th>
      <td>True</td>
      <td>False</td>
      <td>True</td>
      <td>False</td>
    </tr>
  </tbody>
</table>
</div>

<p>You can also apply the reductions: <code class="language-plaintext highlighter-rouge">empty</code>, <code class="language-plaintext highlighter-rouge">any()</code>, <code class="language-plaintext highlighter-rouge">all()</code>, and <code class="language-plaintext highlighter-rouge">bool()</code> to provide a way to summarize a boolean result:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="n">df</span><span class="o">&lt;</span><span class="mi">0</span><span class="p">).</span><span class="nb">all</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A    False
B     True
C    False
dtype: bool
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># here horyzontal direction for comparison is taking into account and we check all row’s items
</span><span class="p">(</span><span class="n">df</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">).</span><span class="nb">all</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0    False
1    False
2    False
dtype: bool
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># here vertical direction for comparison is taking into
# account and we check if just one column’s item satisfies the condition
</span><span class="p">(</span><span class="n">df</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">).</span><span class="nb">any</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>A    False
B     True
C    False
dtype: bool
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># here we check if all DataFrame's items satisfy the condition
</span><span class="p">(</span><span class="n">df</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">).</span><span class="nb">any</span><span class="p">().</span><span class="nb">any</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>True
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># here we check if DataFrame no one element
</span><span class="n">df</span><span class="p">.</span><span class="n">empty</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>False
</code></pre></div></div>

<hr />
<h3 id="descriptive-statistics">Descriptive Statistics</h3>

<table>
  <thead>
    <tr>
      <th>Function</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>abs</td>
      <td>absolute value</td>
    </tr>
    <tr>
      <td>count</td>
      <td>number of non-null observations</td>
    </tr>
    <tr>
      <td>cumsum</td>
      <td>cumulative sum (a sequence of partial sums of a given sequence)</td>
    </tr>
    <tr>
      <td>sum</td>
      <td>sum of values</td>
    </tr>
    <tr>
      <td>mean</td>
      <td>mean of values</td>
    </tr>
    <tr>
      <td>mad</td>
      <td>mean absolute deviation</td>
    </tr>
    <tr>
      <td>median</td>
      <td>arithmetic median of values</td>
    </tr>
    <tr>
      <td>min</td>
      <td>minimum value</td>
    </tr>
    <tr>
      <td>max</td>
      <td>maximum value</td>
    </tr>
    <tr>
      <td>mode</td>
      <td>mode</td>
    </tr>
    <tr>
      <td>prod</td>
      <td>product of values</td>
    </tr>
    <tr>
      <td>std</td>
      <td>unbiased standard deviation</td>
    </tr>
    <tr>
      <td>var</td>
      <td>unbiased variance</td>
    </tr>
  </tbody>
</table>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"Sum : "</span><span class="p">,</span> <span class="n">movies</span><span class="p">[</span><span class="s">'age'</span><span class="p">].</span><span class="nb">sum</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Sum :  3089983.0
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   A  B  C
0  1 -2  7
1  2 -3  8
2  3 -4  9
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"Mean : "</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">mean</span><span class="p">())</span>

<span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Mean of all Mean Values: "</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">mean</span><span class="p">().</span><span class="n">mean</span><span class="p">())</span>

<span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Median: "</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">median</span><span class="p">())</span>

<span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Standard Deviation: "</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">std</span><span class="p">())</span>

<span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Variance: "</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="n">var</span><span class="p">())</span>

<span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Max: "</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="nb">max</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Mean :
A    2.0
B   -3.0
C    8.0
dtype: float64

Mean of all Mean Values:
2.3333333333333335

Median:
A    2.0
B   -3.0
C    8.0
dtype: float64

Standard Deviation:
A    1.0
B    1.0
C    1.0
dtype: float64

Variance:
A    1.0
B    1.0
C    1.0
dtype: float64

Max:
A    3
B   -2
C    9
dtype: int64
</code></pre></div></div>

<hr />
<h2 id="function-applications">Function Applications</h2>
<p>When you need to make some transformations with some column’s or row’s elements, then method <code class="language-plaintext highlighter-rouge">map</code> will be helpful (it works like pure Python function <code class="language-plaintext highlighter-rouge">map()</code> ). But there is also possibility to apply some function to each DataFrame element (not to a column or a row) – method <code class="language-plaintext highlighter-rouge">apply(map)</code> aids in this case.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">movies</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="p">(</span><span class="n">movies</span><span class="p">.</span><span class="n">dtypes</span> <span class="o">==</span> <span class="n">np</span><span class="p">.</span><span class="n">int64</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">movies</span><span class="p">.</span><span class="n">dtypes</span> <span class="o">==</span> <span class="n">np</span><span class="p">.</span><span class="n">float64</span><span class="p">)].</span><span class="nb">apply</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">)</span>
<span class="c1"># This calculates the mean of all the columns present in movies
</span></code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>user_id        4.624848e+02
movie_id       4.255301e+02
rating         3.529860e+00
timestamp      8.835289e+08
age            3.296650e+01
unknown        1.000000e-04
Action         2.558900e-01
Adventure      1.375300e-01
Animation      3.605000e-02
Childrens      7.182000e-02
Comedy         2.983200e-01
Crime          8.055000e-02
Documentary    7.580000e-03
Drama          3.989500e-01
Fantasy        1.352000e-02
Film-Noir      1.733000e-02
Horror         5.317000e-02
Musical        4.954000e-02
Mystery        5.245000e-02
Romance        1.946100e-01
Sci-Fi         1.273000e-01
Thriller       2.187200e-01
War            9.398000e-02
Western        1.854000e-02
dtype: float64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># to print mean of all row values in movies :
</span><span class="n">movies</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,(</span><span class="n">movies</span><span class="p">.</span><span class="n">dtypes</span><span class="o">==</span><span class="n">np</span><span class="p">.</span><span class="n">int64</span><span class="p">)</span> <span class="o">|</span> <span class="p">(</span><span class="n">movies</span><span class="p">.</span><span class="n">dtypes</span><span class="o">==</span><span class="n">np</span><span class="p">.</span><span class="n">float64</span><span class="p">)].</span><span class="nb">apply</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0        3.671881e+07
1        3.692952e+07
2        3.680285e+07
3        3.712641e+07
4        3.648948e+07
5        3.662343e+07
6        3.683796e+07
7        3.664883e+07
8        3.672981e+07
9        3.657322e+07
10       3.646959e+07
11       3.714094e+07
12       3.691021e+07
13       3.667207e+07
14       3.868486e+07
15       3.711643e+07
16       3.654020e+07
17       3.646151e+07
18       3.825258e+07
19       3.684153e+07
20       3.663078e+07
21       3.653976e+07
22       3.690734e+07
23       3.700433e+07
24       3.804139e+07
25       3.704913e+07
26       3.715335e+07
27       3.680185e+07
28       3.682009e+07
29       3.682872e+07
             ...     
99970    3.836551e+07
99971    3.702680e+07
99972    3.703066e+07
99973    3.705424e+07
99974    3.661341e+07
99975    3.714594e+07
99976    3.714594e+07
99977    3.714592e+07
99978    3.714594e+07
99979    3.714594e+07
99980    3.714592e+07
99981    3.648981e+07
99982    3.869825e+07
99983    3.720672e+07
99984    3.714594e+07
99985    3.714584e+07
99986    3.876098e+07
99987    3.704094e+07
99988    3.712668e+07
99989    3.696509e+07
99990    3.712652e+07
99991    3.713393e+07
99992    3.807540e+07
99993    3.684269e+07
99994    3.678404e+07
99995    3.705384e+07
99996    3.866487e+07
99997    3.705384e+07
99998    3.696514e+07
99999    3.670202e+07
Length: 100000, dtype: float64
</code></pre></div></div>

<h3 id="remember">Remember</h3>

<p>The attribute axis define the horizontal <code class="language-plaintext highlighter-rouge">(axis=1)</code> or vertical direction for calculations <code class="language-plaintext highlighter-rouge">(axis=0)</code></p>

<hr />
<h2 id="groupby-with-dictionary">Groupby with Dictionary</h2>

<p>Find more about this at my GeeksForGeeks <a href="https://www.geeksforgeeks.org/combining-multiple-columns-in-pandas-groupby-with-dictionary/">Publication</a>.</p>

<hr />
<h2 id="breaking-up-a-string-into-columns-using-regex">Breaking up a String into columns using regex</h2>

<p>Find more about this at my GeeksForGeeks <a href="https://www.geeksforgeeks.org/split-a-string-into-columns-using-regex-in-pandas-dataframe/">Publication</a>.</p>

<hr />
<h2 id="ranking-rows-in-pandas">Ranking Rows in Pandas</h2>

<p>Find more about this at my GeeksForGeeks <a href="https://www.geeksforgeeks.org/ranking-rows-of-pandas-dataframe/">Publication</a>.</p>

<hr />

<!-- Place this tag where you want the button to render. -->
<p><a class="github-button" href="https://github.com/RohitMidha23" data-size="large" data-show-count="true" aria-label="Follow @RohitMidha23 on GitHub">Follow @RohitMidha23</a>
<!-- Place this tag in your head or just before your close body tag. -->
<script async="" defer="" src="https://buttons.github.io/buttons.js"></script></p>

<p>Find more at my Github repository <a href="http://bit.ly/ExplainedRepo">Explained</a>.</p>

<p>Show some :heart: by :star:ing it.</p>

<!-- Place this tag where you want the button to render. -->
<p><a class="github-button" href="https://github.com/RohitMidha23/Explained" data-size="large" data-show-count="true" aria-label="Star RohitMidha23/Explained on GitHub">Star</a>
<a href="https://github.com/RohitMidha23/Explained" class="github-corner" aria-label="View source on GitHub"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#fff; color:#151513; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style></p>]]></content><author><name>Rohit Midha</name></author><category term="blog" /><category term="pandas" /><category term="tutorial" /><category term="Explained" /><summary type="html"><![CDATA[This is the first tutorial of the Explained! series.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/IntroductionToPandas/pandas.png" /><media:content medium="image" url="http://localhost:4000/assets/images/IntroductionToPandas/pandas.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Neural Network Decision Boundary</title><link href="http://localhost:4000/Neural-Network-Decision-Boundary/" rel="alternate" type="text/html" title="Neural Network Decision Boundary" /><published>2019-01-07T10:20:00+00:00</published><updated>2019-01-07T10:20:00+00:00</updated><id>http://localhost:4000/Neural-Network-Decision-Boundary</id><content type="html" xml:base="http://localhost:4000/Neural-Network-Decision-Boundary/"><![CDATA[<p style="font-size:12px;">Inspired by Jon Char's Publication.</p>
<h1 id="objective">Objective</h1>

<p>In this post I will implement an example neural network using Keras and show you how the Neural Network learns over time.
Keras is a framework for building ANNs that sits on top of either a Theano or TensorFlow backend.
I really like Keras cause it’s fairly simply to use and one can get a network up and running in no time.
The <a href="https://blog.keras.io/">Keras Blog</a> has some great examples of how to use the framework.</p>

<hr />

<p>Start off by importing all the required packages</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="n">seed</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="kn">from</span> <span class="nn">sklearn</span> <span class="kn">import</span> <span class="n">datasets</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>

<span class="kn">from</span> <span class="nn">keras.models</span> <span class="kn">import</span> <span class="n">Sequential</span>
<span class="kn">from</span> <span class="nn">keras.layers</span> <span class="kn">import</span> <span class="n">Dense</span>
<span class="kn">from</span> <span class="nn">keras.optimizers</span> <span class="kn">import</span> <span class="n">SGD</span>
</code></pre></div></div>

<p>Next we generate the dataset and the scatter plot.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="n">datasets</span><span class="p">.</span><span class="n">make_moons</span><span class="p">(</span><span class="n">n_samples</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">noise</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">colors</span> <span class="o">=</span> <span class="p">[</span><span class="s">'blue'</span> <span class="k">if</span> <span class="n">label</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="s">'red'</span> <span class="k">for</span> <span class="n">label</span> <span class="ow">in</span> <span class="n">y</span><span class="p">]</span>
<span class="n">plt</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">X</span><span class="p">[:,</span><span class="mi">1</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">)</span>
<span class="n">y</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">X</span><span class="p">.</span><span class="n">shape</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>((1000,), (1000, 2))
</code></pre></div></div>

<p><img src="/assets/images/NeuralNetBoundary/output_3_1.png" alt="png" /></p>

<h2 id="defining-the-model">Defining the Model</h2>
<p>The Keras Python library makes creating deep learning models fast and easy.</p>

<p>The sequential API allows you to create models layer-by-layer for most problems. Keras has different activation functions built in such as ‘sigmoid’, ‘tanh’, ‘softmax’, and <a href="https://keras.io/optimizers/">many others</a>. Also built in are different weight initialization options. We use the sigmoid activation which limits the values to $[-\epsilon,\epsilon]$</p>

<p>This initialization method corresponds to the <code class="language-plaintext highlighter-rouge">'glorot_uniform'</code> initialization option in Keras.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Define our model object
</span><span class="n">model</span> <span class="o">=</span> <span class="n">Sequential</span><span class="p">()</span>

<span class="c1"># kwarg dict for convenience
</span><span class="n">layer_kw</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">activation</span><span class="o">=</span><span class="s">'sigmoid'</span><span class="p">,</span> <span class="n">init</span><span class="o">=</span><span class="s">'glorot_uniform'</span><span class="p">)</span>

<span class="c1"># Add layers to our model
</span><span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="n">output_dim</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">input_shape</span><span class="o">=</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="p">),</span> <span class="o">**</span><span class="n">layer_kw</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="n">output_dim</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="o">**</span><span class="n">layer_kw</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="n">add</span><span class="p">(</span><span class="n">Dense</span><span class="p">(</span><span class="n">output_dim</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="o">**</span><span class="n">layer_kw</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="defining-the-optimizer">Defining the Optimizer</h2>
<p>While initializing the Keras model we also need to specify an optimizer such as SGD or Adam or RMSProp. In this case we will use SGD. You can however read more about them <a href="https://keras.io/optimizers/">here</a>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sgd</span> <span class="o">=</span> <span class="n">SGD</span><span class="p">(</span><span class="n">lr</span><span class="o">=</span><span class="mf">0.001</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="compile-the-model">Compile the Model</h2>
<p>A loss function (or objective function, or optimization score function) is one of the two parameters required to compile a model, the other being the optimizer itself.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model</span><span class="p">.</span><span class="nb">compile</span><span class="p">(</span><span class="n">optimizer</span><span class="o">=</span><span class="n">sgd</span><span class="p">,</span> <span class="n">loss</span><span class="o">=</span><span class="s">'binary_crossentropy'</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="summarize-the-model">Summarize the Model</h2>
<p>Keras allows for models to be summarized using <code class="language-plaintext highlighter-rouge">model.summary()</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model</span><span class="p">.</span><span class="n">summary</span><span class="p">()</span>
</code></pre></div></div>
<blockquote>

  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
dense_4 (Dense)              (None, 5)                 15        
_________________________________________________________________
dense_5 (Dense)              (None, 5)                 30        
_________________________________________________________________
dense_6 (Dense)              (None, 1)                 6         
=================================================================
Total params: 51
Trainable params: 51
Non-trainable params: 0
_________________________________________________________________
</code></pre></div>  </div>

</blockquote>

<h2 id="train-the-model">Train the Model</h2>
<p>We can now train our model using the <code class="language-plaintext highlighter-rouge">model.fit()</code> method. We will save this as history to refer to it at a future point. Since the number of epochs is very high we will set <code class="language-plaintext highlighter-rouge">verbose=0</code> and shuffle the data as well.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">history</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">fit</span><span class="p">(</span><span class="n">X</span><span class="p">[:</span><span class="mi">500</span><span class="p">],</span> <span class="n">y</span><span class="p">[:</span><span class="mi">500</span><span class="p">],</span> <span class="n">verbose</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">nb_epoch</span><span class="o">=</span><span class="mi">4000</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="visualizing-the-results">Visualizing the Results</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">plot_decision_boundary</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">steps</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'Paired'</span><span class="p">):</span>
    <span class="n">cmap</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">get_cmap</span><span class="p">(</span><span class="n">cmap</span><span class="p">)</span>

    <span class="c1"># Define region of interest by data limits
</span>    <span class="n">xmin</span><span class="p">,</span> <span class="n">xmax</span> <span class="o">=</span> <span class="n">X</span><span class="p">[:,</span><span class="mi">0</span><span class="p">].</span><span class="nb">min</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">X</span><span class="p">[:,</span><span class="mi">0</span><span class="p">].</span><span class="nb">max</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">ymin</span><span class="p">,</span> <span class="n">ymax</span> <span class="o">=</span> <span class="n">X</span><span class="p">[:,</span><span class="mi">1</span><span class="p">].</span><span class="nb">min</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">X</span><span class="p">[:,</span><span class="mi">1</span><span class="p">].</span><span class="nb">max</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span>
    <span class="n">steps</span> <span class="o">=</span> <span class="mi">1000</span>
    <span class="n">x_span</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="n">xmin</span><span class="p">,</span> <span class="n">xmax</span><span class="p">,</span> <span class="n">steps</span><span class="p">)</span>
    <span class="n">y_span</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="n">ymin</span><span class="p">,</span> <span class="n">ymax</span><span class="p">,</span> <span class="n">steps</span><span class="p">)</span>
    <span class="n">xx</span><span class="p">,</span> <span class="n">yy</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">meshgrid</span><span class="p">(</span><span class="n">x_span</span><span class="p">,</span> <span class="n">y_span</span><span class="p">)</span>

    <span class="c1"># Make predictions across region of interest
</span>    <span class="n">labels</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">c_</span><span class="p">[</span><span class="n">xx</span><span class="p">.</span><span class="n">ravel</span><span class="p">(),</span> <span class="n">yy</span><span class="p">.</span><span class="n">ravel</span><span class="p">()])</span>

    <span class="c1"># Plot decision boundary in region of interest
</span>    <span class="n">z</span> <span class="o">=</span> <span class="n">labels</span><span class="p">.</span><span class="n">reshape</span><span class="p">(</span><span class="n">xx</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>

    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">contourf</span><span class="p">(</span><span class="n">xx</span><span class="p">,</span> <span class="n">yy</span><span class="p">,</span> <span class="n">z</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

    <span class="c1"># Get predicted labels on training data and plot
</span>    <span class="n">train_labels</span> <span class="o">=</span> <span class="n">model</span><span class="p">.</span><span class="n">predict</span><span class="p">(</span><span class="n">X</span><span class="p">)</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">scatter</span><span class="p">(</span><span class="n">X</span><span class="p">[:,</span><span class="mi">0</span><span class="p">],</span> <span class="n">X</span><span class="p">[:,</span><span class="mi">1</span><span class="p">],</span> <span class="n">c</span><span class="o">=</span><span class="n">y</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">cmap</span><span class="p">,</span> <span class="n">lw</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plot_decision_boundary</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">model</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'RdBu'</span><span class="p">)</span>
</code></pre></div></div>
<p><img src="/assets/images/NeuralNetBoundary/decision-boundary.png" alt="png" /></p>

<hr />

<!-- Place this tag where you want the button to render. -->
<p><a class="github-button" href="https://github.com/RohitMidha23" data-size="large" data-show-count="true" aria-label="Follow @RohitMidha23 on GitHub">Follow @RohitMidha23</a>
<!-- Place this tag in your head or just before your close body tag. -->
<script async="" defer="" src="https://buttons.github.io/buttons.js"></script></p>

<p>Show some :heart: by :star:ing it.</p>

<!-- Place this tag where you want the button to render. -->
<!-- Place this tag where you want the button to render. -->
<p><a class="github-button" href="https://github.com/RohitMidha23/Neural-Network-Decision-Boundary" data-size="large" data-show-count="true" aria-label="Star RohitMidha23/Neural-Network-Decision-Boundary on GitHub">Star</a>
<a href="https://github.com/RohitMidha23/Neural-Network-Decision-Boundary" class="github-corner" aria-label="View source on GitHub"><svg width="80" height="80" viewBox="0 0 250 250" style="fill:#fff; color:#151513; position: absolute; top: 0; border: 0; left: 0; transform: scale(-1, 1);" aria-hidden="true"><path d="M0,0 L115,115 L130,115 L142,142 L250,250 L250,0 Z"></path><path d="M128.3,109.0 C113.8,99.7 119.0,89.6 119.0,89.6 C122.0,82.7 120.5,78.6 120.5,78.6 C119.2,72.0 123.4,76.3 123.4,76.3 C127.3,80.9 125.5,87.3 125.5,87.3 C122.9,97.6 130.6,101.9 134.4,103.2" fill="currentColor" style="transform-origin: 130px 106px;" class="octo-arm"></path><path d="M115.0,115.0 C114.9,115.1 118.7,116.5 119.8,115.4 L133.7,101.6 C136.9,99.2 139.9,98.4 142.2,98.6 C133.8,88.0 127.5,74.4 143.8,58.0 C148.5,53.4 154.0,51.2 159.7,51.0 C160.3,49.4 163.2,43.6 171.4,40.1 C171.4,40.1 176.1,42.5 178.8,56.2 C183.1,58.6 187.2,61.8 190.9,65.4 C194.5,69.0 197.7,73.2 200.1,77.6 C213.8,80.2 216.3,84.9 216.3,84.9 C212.7,93.1 206.9,96.0 205.4,96.6 C205.1,102.4 203.0,107.8 198.3,112.5 C181.9,128.9 168.3,122.5 157.7,114.1 C157.9,116.9 156.7,120.9 152.7,124.9 L141.0,136.5 C139.8,137.7 141.6,141.9 141.8,141.8 Z" fill="currentColor" class="octo-body"></path></svg></a><style>.github-corner:hover .octo-arm{animation:octocat-wave 560ms ease-in-out}@keyframes octocat-wave{0%,100%{transform:rotate(0)}20%,60%{transform:rotate(-25deg)}40%,80%{transform:rotate(10deg)}}@media (max-width:500px){.github-corner:hover .octo-arm{animation:none}.github-corner .octo-arm{animation:octocat-wave 560ms ease-in-out}}</style></p>]]></content><author><name>Rohit Midha</name></author><category term="blog" /><category term="machine learning" /><category term="keras" /><category term="tensorflow" /><category term="neural networks" /><category term="tutorial" /><summary type="html"><![CDATA[Inspired by Jon Char's Publication. Objective]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://localhost:4000/assets/images/NeuralNetBoundary/decision-boundary.png" /><media:content medium="image" url="http://localhost:4000/assets/images/NeuralNetBoundary/decision-boundary.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>